package security;

import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.security.InvalidKeyException;

public final class Rijndael_Algorithm {
    static final int BLOCK_SIZE = 16;
    static final boolean DEBUG = false;
    static final int ENCODE_SIZE = 3;
    static final boolean GO_ROUND = false;
    private static final char[] HEX_DIGITS = null;
    static final boolean IN = true;
    static final int KEY_INDEX = 404;
    static final int KEY_SIZE = 16;
    static final int MAX_CAP = 0x1000;
    static final String NAME = "Rijndael_Algorithm";
    static final boolean OUT = false;
    static final byte[] S;
    static final byte[] Si;
    static final int[] T1;
    static final int[] T2;
    static final int[] T3;
    static final int[] T4;
    static final int[] T5;
    static final int[] T6;
    static final int[] T7;
    static final int[] T8;
    static final boolean TRACE;
    static final int[] U1;
    static final int[] U2;
    static final int[] U3;
    static final int[] U4;
    static final int[] alog;
    static final int debuglevel;
    static final PrintWriter err;
    static final int[] log;
    static final char[] pKEYs;
    static final byte[] rcon;
    static final int[][][] shifts;

    static {
        Rijndael_Algorithm.TRACE = Rijndael_Properties.isTraceable("Rijndael_Algorithm");
        int[] arr_v = new int[0x100];
        Rijndael_Algorithm.alog = arr_v;
        Rijndael_Algorithm.log = new int[0x100];
        Rijndael_Algorithm.S = new byte[0x100];
        Rijndael_Algorithm.Si = new byte[0x100];
        Rijndael_Algorithm.T1 = new int[0x100];
        Rijndael_Algorithm.T2 = new int[0x100];
        Rijndael_Algorithm.T3 = new int[0x100];
        Rijndael_Algorithm.T4 = new int[0x100];
        Rijndael_Algorithm.T5 = new int[0x100];
        Rijndael_Algorithm.T6 = new int[0x100];
        Rijndael_Algorithm.T7 = new int[0x100];
        Rijndael_Algorithm.T8 = new int[0x100];
        Rijndael_Algorithm.U1 = new int[0x100];
        Rijndael_Algorithm.U2 = new int[0x100];
        Rijndael_Algorithm.U3 = new int[0x100];
        Rijndael_Algorithm.U4 = new int[0x100];
        Rijndael_Algorithm.rcon = new byte[30];
        Rijndael_Algorithm.shifts = new int[][][]{new int[][]{new int[]{0, 0}, new int[]{1, 3}, new int[]{2, 2}, new int[]{3, 1}}, new int[][]{new int[]{0, 0}, new int[]{1, 5}, new int[]{2, 4}, new int[]{3, 3}}, new int[][]{new int[]{0, 0}, new int[]{1, 7}, new int[]{3, 5}, new int[]{4, 4}}};
        Rijndael_Algorithm.HEX_DIGITS = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        Rijndael_Algorithm.pKEYs = new char[]{'L', 'ï', '(', 'ª', 'w', '\u0016', '\u001D', '\u000E', 'Ï', '\b', '\u0003', '\u008B', 'K', '\u009E', '2', 'r', '\u0094', 'å', '\u0015', '\u0083', '¥', '¡', '\u009B', 'õ', 'È', 'À', '\u009A', 'µ', 'c', '\f', '¦', 'Ü', '\'', 'Ì', 'K', '¤', '\u0091', '\u001C', '\u008D', '\u0083', 'è', '\u0099', '·', '\u000E', 'ì', 'f', 'Í', '¤', '\n', 'Î', 'i', ' ', '`', 'ê', '!', '\u0096', '\u001D', 'ô', 'u', 'u', '9', 'Q', 'ö', '\u007F', '-', '\u0007', '\r', '&', 'K', 'Ñ', 'µ', '}', 'Ì', '\u0096', '\u008C', '\u0084', '\"', ',', 'Ý', '_', 'O', '\'', 'c', '\u0017', '(', 'ò', '&', '\u008A', 'ù', 'Á', 'k', '±', 'ý', 'u', '­', '`', 'é', 'P', 'Ã', '\u001C', 'f', 'E', '\u0004', '~', '\u0015', '\u0012', '\u0087', 'v', '\u0084', 'D', 'o', '×', '(', '6', '\u0019', ')', '\u008A', '×', '¬', 'Ï', 'û', 'º', 'l', '\u008D', 'k', 'à', '$', '+', 'H', 'B', 'æ', 'u', 'Ã', 'ì', '2', 'Í', '\u0015', 'Û', '·', 'Ð', '\u009F', 'ß', 'Ì', 'v', '\u0089', '\u0084', 'å', '\f', 'Ì', '÷', 'È', '[', 'F', 'í', 'Ã', 's', '¬', '\u0099', 'Ü', 'È', 'Ì', 'm', 'ã', 'Ç', '\n', 'Ï', 'â', '\u008D', 'ö', '¯', '|', 'p', '\f', '¥', '*', 'a', 'Ù', 'Þ', '\u0082', '\u0015', '^', 'X', 'ý', '\u001B', '\u0013', 'M', 'Ò', '-', '¥', 'Z', '\u000E', '^', '\u001E', 'S', 'R', '\u0094', 'E', ':', '\u0004', ':', '\u000F', 'r', '\u008C', 'Y', 'Ø', 'Ù', 'ù', '\u0005', ')', 'à', '&', ',', '\u0086', 'ª', '\u0081', '\u0007', '\u0016', '>', '-', 'Ó', 'Ë', 'Q', '\u0088', 'í', 'Q', '\u0016', 'P', 't', 'W', '\u001C', 'Ï', 'Ü', '¡', '\u0099', 'ì', 'f', '\u0084', 'D', '\u0094', 'Õ', '¿', 'O', 'q', 'A', 'f', '\u001C', '9', 'z', 'ð', '\u0080', '=', 'Í', '¬', 'D', 'ÿ', 'Æ', 'q', '\u0016', 'C', 'm', 'õ', 'f', '\u0006', '\u009B', 'Q', '¦', '\u0097', '¬', 'l', '¨', '\t', '\u0006', '\u0019', '\r', 'S', '\u0086', '9', 'Ì', '\u0017', '\u009A', '÷', '9', 'Å', '\"', 'ð', 'é', '\u009F', '¤', 'N', ';', 'B', '!', 'i', ' ', 'Ï', '\u0087', '\u0011', 'W', ')', 'U', ';', 'ÿ', 'Á', '\u008F', '/', 'T', 'É', '6', 'p', '\u0093', '5', '\u000E', '\u0014', 'b', 'ý', 'ð', '\u001F', '\u0097', '\u009E', '\u0018', '\u0013', ':', 'ä', '+', 'å', 'q', 'Ñ', 'Í', '¼', '\\', 'º', '+', 'D', '@', 'Ï', ' ', 'D', '\u0003', '\u008F', '\u008C', '\u0005', 'c', 'Ó', '>', 'i', 'V', 'ú', '\u009C', 'Ò', '.', '\u000E', '\u001B', '\u0090', 'ü', '8', ']', '\u0018', 'ë', 'i', '\u0012', '¡', 'M', '«', '\u0018', 'h', 'j', '\u0091', 'U', 'p', '?', '§', 'W', '­', '\u0001', '\u0086', '`', '\u0096', '¾', '¸', '0', ',', 'Y', '&', '÷', 'Ú', '\u0087', '¡', '£', 'Ù', 'D', '«', 'Ã', 'F', '\u009C', '4', 'Ü', 'j', '\u001D', 'w', 'è', '¬', '%', 'ß', '¿', '<', 'Û', '[', '\u0013', 'Ç', '\u009D', 'r', '\u0000', 'J', '\u008A', 'Õ', 'Ð', '\u0018', '\u0003', 'W', 'Ç', '\u0092', 'Ï', 'k', '\u008A', '\u0019', 'Ò', '\\', '¼', 'M', 'ö', '+', '\u001C', '*', 'E', '!', '\u001C', 'ñ', '¬', '¢', 'Å', 'Z', 'Â', '\u0099', 'e', 'e', 'Í', 'È', '\u0003', 'ª', 'D', 'R', 'a', '¸', 'ì', '\u001F', '5', 'Ú', '>', '5', 'Ú', '\u0090', 'ù', 'Ë', 'ª', '¡', '·', 'C', '\b', 'p', 'È', ',', '\'', 'Ô', 'Ô', '\u0014', 'P', '\u007F', 'P', '´', ',', '{', 'ö', '\\', '$', '\u0093', '.', 'Ç', 'D', 'j', 'ð', '\u0005', '\u008B', '\r', 'Á', '\u0014', 'e', 'j', '{', '\'', '{', '\u009A', '0', '4', 'i', 'ì', 'Â', '¦', 'ë', '·', 'L', '¥', '~', '«', 'A', '\u0082', 'S', '\u008A', 'y', '+', 'l', 'Þ', '3', '#', 'â', '%', '2', '\u0019', '_', '\u0096', 'ë', 'Ý', '*', '&', 'Ê', '¸', '\u0089', 'g', 'Ô', '¤', '\u009C', '©', '\u009C', '|', '¿', 'å', '\u0018', '8', '\u009C', '¿', 'Þ', '\u009C', 'º', 'w', '¾', 'Ú', '¦', '\u0014', '\u0002', 'd', 'D', 'Ê', '|', '\u0006', 'ê', '\u008C', 'í', '\u0081', 'í', '\u0081', '\u0017', '¸', '\u000B', '}', '¹', 'w', '\u009A', '\u0012', '|', '×', '\u0096', '¯', 'l', '\u0093', '±', 'T', 's', 'o', '\u0088', '\u0095', '½', '7', '<', '\u009D', '\u0091', 'È', 'W', '+', '\b', '\u009A', '\u0002', '¶', 'x', '\u0090', '\u0088', 'õ', 'Þ', 'x', '\u0097', '2', 'ô', 'Ê', '\u001D', ' ', '6', 'Ó', '\b', '\u0012', 'V', '+', 'F', '(', '\u0099', '\u009D', 'þ', '9', '¡', '\u0002', '\u0004', 'Ô', '\u009B', 'ô', '5', '\u000E', '(', '\u008A', '\u0005', '7', '\u0018', 'C', 'â', '\u0096', 'é', '\u009D', 'à', '\u009E', 'Ù', 'Ù', '\\', '!', '\u0007', '\u0016', '\u0084', '+', 'Î', '/', 'ê', 'ü', 'd', '\u0087', 'f', 'ÿ', 'T', 'x', 'j', 'D', '¸', 'Ï', 'Ü', '\f', 'ú', '\u0001', '=', '¶', '=', '4', 'K', '9', '´', 'å', '\f', '\u000B', 'ù', '«', '\u001D', '\u0015', '¹', '#', 'Q', 'c', 'b', ' ', 'N', 'l', 'x', 'J', 'Ê', '\u0003', '\u0007', 'ñ', '¶', 'a', '>', '?', 'B', 'ü', 'Õ', 'k', '\u0092', 'U', '\u009D', 'Ç', '\u0001', 'í', '1', '½', '£', '\t', '\u008B', '\u0004', 'P', 'h', '{', '\u0015', '¡', 'ì', 'ï', 'x', '\u001A', 'é', 'Õ', 'j', ';', ':', '\r', '+', 'Í', '\u0017', 'Ä', '×', '*', 'Â', 'J', '?', '$', 'd', 'A', 'Ý', '×', '|', '6', 'Î', 'P', '7', 'Ø', 'ý', '\u0017', '\u009A', '\u001E', 'Ú', 'à', '*', '8', '/', 'á', 'è', ',', 'Ð', '6', 'É', 'v', 'ò', ']', 'ß', '7', ')', '?', ')', '¿', 'k', 'Ö', 'G', 'p', '\u0017', '\u008F', 'Ö', '×', '\u0095', '@', '6', 'e', 'Ý', '\u008C', 'þ', '.', '\u009B', '\u0082', '±', 'V', '\u0093', '2', 'Ì', '\b', 'i', 'Î', '\u0085', 'Ã', '?', '\u008B', '¥', '\u0084', '%', '¸', '¿', 'r', '¨', 'æ', '\u0013', 'Y', '×', '\u0005', 's', 'ï', '\u0002', 'ý', '¡', '\u0094', 'l', '\u0096', '¼', '\u007F', '¨', '\u000E', '\u0093', '\u008A', 'Û', '\u0093', '\u0080', 'Â', '\u001C', '«', '±', 'ë', 'k', 'd', '5', 'I', '¬', '\t', 'y', '\u0014', '$', 'z', 'k', '\u0094', 'Ä', '\u0006', ',', '·', '\u0099', '¸', 'ð', ':', 'N', 'ÿ', '@', 'ù', '/', 'À', 'R', 'Î', ']', 'V', 'Ð', 'J', 'ó', '\\', '\u008E', 'j', '¾', 'ý', '\u0084', 'º', '¨', '-', '}', '§', '²', 'C', 'v', 'L', 'Ã', '¿', '\u000E', '\u000B', '\u0083', '\\', 'j', '\"', ']', '\u0090', '}', '\f', '\u0001', 'e', '\u0013', 'ñ', 'B', '¸', '±', 'Ð', '\u0097', '\u009B', 'W', '5', 'L', 'º', 'Ø', 'Æ', 'x', 'y', 'Ô', '\u0086', 't', '/', 'É', 'f', 'x', 'è', '\u0010', 'Â', 'Ö', 't', '\u009E', '©', 'h', '\u0017', 'ö', 'ê', '\f', '\u001A', '\u0017', 'ä', '\u0098', ';', '¶', 'ª', 'j', 'â', 'ï', '\u0013', '\u0093', 'Ì', 'á', '\u008B', 'ý', '¿', '\u009A', '\u008B', '\u0006', 'ÿ', 'î', '\u0007', 'Ú', 'H', '\u0087', 'R', '\u0091', '½', 'î', '3', 'Ò', 'Ó', ',', 'j', 'ú', 'î', '\u0001', '\u0096', '\r', 'ð', '\u0017', 'ù', 't', 'q', '\u009D', '\n', '¢', '2', '\u0006', '\u0097', 'a', 'ß', 'l', 'Ì', 'ë', 'i', '·', 'æ', 'n', '\u0095', 'g', 'D', 'ú', '\u0082', 'T', '<', 'R', 'ç', 'õ', 'µ', 'ò', '\u0013', '\u0092', 'X', 'U', '»', '¡', '7', 'ä', 'C', '(', 'ö', 'Â', 'J', '}', 'Ã', '.', 's', 'Ä', '\u0018', '\u008C', '\u000B', 'ø', '\b', '\u0093', 'Ý', 'B', '\u0085', '¶', 'ç', 'j', '{', '\u0095', '\n', 'B', '»', 'y', '-', '\u009F', '^', '\u009D', 'ç', '/', '\u007F', 'ß', 'Ë', '\u0094', 'Î', 'q', 'ã', '$', '×', ';', '°', '\u0088', '\u009F', '\u009A', 'ý', 'ô', 'Q', 'L', 'ç', 'X', '`', 'ü', 'P', 'È', 'ï', '\u009A', 'Ý', 'z', 'Û', '6', '$', '\u009A', 'ú', 'Í', 'P', '\u0083', 'É', '\u0016', 'Ù', '÷', '!', '\u0013', '\u0095', '\"', '¢', 'î', 'P', 'ü', '\u0095', 'f', '9', '_', '»', '\u0010', '\u0007', 'È', '/', 'I', 'Y', '.', '¹', '-', '@', 'n', 'Ë', '¸', 'å', 'y', '\u0085', '!', 'H', '\u009A', '\u0098', '}', 'Ø', 'Å', '!', 'Ã', '\u000E', 'ï', '\u0010', '\t', 'j', '\u008A', 'm', '>', 'p', '¦', '¬', 'ý', 'í', 'Ë', '$', ';', 'v', '&', '\u008A', '\u0084', 'Í', 'å', '7', '·', '¾', 'Ì', '\n', '\u0092', '\u001F', 'Û', '¢', '?', 'Ð', 'ª', '¬', '\u008F', '\u009B', ' ', '\u0018', '\u0094', '¥', 'Y', 'ª', '\u0086', ']', 'D', '\u0087', 'È', '\u0095', '\u0099', 'C', '·', '0', '|', '\u000E', '¹', '\u001C', '\u0016', '5', '\u0084', '4', '*', 'ê', '\u0019', '±', '/', '&', '£', ' ', '-', '3', '±', 'Ó', ';', 'w', '¿', '\u0000', 'Ï', '\u0005', 'ú', '%', '§', '\u0018', 'e', '1', '\u001B', 'D', 'K', 'ë', 'Â', '\u0080', '×', '\u001F', 'õ', '9', 'k', '\u0093', 'c', 'B', 'ã', '\u0094', '\u0015', '¢', '³', '¿', 'ù', 'ù', '$', 'Ú', '\u0093', '\u0015', '\u0019', 'á', 'R', '\u0095', 'R', '\u0015', 'R', 'Ù', 'þ', '\u009D', '\u001A', 'ô', ')', 'Ù', '\u008F', 'Ò', '÷', '^', '^', 'Ç', 'Ü', '\'', 'å', '$', 'p', 'J', 'ñ', '\u0018', '\u0015', '\u0087', 'ô', 'ü', '\f', 'Ë', '\u0099', 'ç', '\u0016', 'Ì', 'S', 'B', 'å', 'ã', '2', '\u009F', 'Ç', '\u0001', '$', '{', '$', 'v', '!', '\u0006', '¥', 'ó', '(', 'Ñ', '²', ';', '¶', '¾', '\u000E', 'º', '§', 'k', '¥', '\u0092', 'O', '¹', '\u0081', '\u001A', '|', 'Ä', 'Ì', '\u007F', '\u0080', 'A', 'Ï', '*', 'o', 'C', 'y', '¤', 'W', '!', '\\', '\u0084', 'ÿ', 'h', 'º', '\u0013', '\n', ',', '\n', 'v', ']', 'ö', '\u0092', '\u008C', '(', '\u0002', 'û', '\u0094', 'I', 'G', 'Ú', '$', 'ú', 'd', 'ª', '\u001F', '(', 'Å', '@', '.', '\u0001', 'å', '7', 'Þ', ';', '.', 'Ð', '\u009D', 'u', 'r', 'W', 'ë', '¼', '9', '\u0010', '\u0005', 'C', 't', '&', '¿', 'k', 'P', 'Õ', 'I', '}', '´', '\u0004', 'W', '^', '²', '­', 'n', '/', 'e', '\u0004', 'H', '9', '\u001D', '\u000E', '\u0007', 'K', '4', '\u0013', '\t', 'u', 'M', 'É', '¤', 'k', 'S', 'z', '\u0010', '¶', 'u', 'Ï', '\u009A', 'È', 'K', '#', 'I', '\f', 'M', '¶', '\u0093', '\u001E', ' ', '7', '\u0085', 'A', '#', '=', '@', 'e', '\u008A', '\u009D', '³', '¡', 'n', 'ý', '!', '\\', '}', '#', 'y', 'A', 'y', 'w', 'Ñ', '³', ':', 'Ã', 'û', '\u0018', '<', 'Þ', '`', 'è', 't', 'e', 'Õ', '(', '6', 'ð', 'Ø', '³', 'D', '3', '­', '³', 'r', 'À', '\u0091', '6', 'Ò', 'Y', 'ç', '\\', '`', 'Ú', '¬', '\u0080', '\u0087', 'Ã', 't', '\f', 'G', '¾', '\u0096', '\u0091', '\u008E', 'N', 'ò', 'ô', 'î', '©', '§', '\u008F', '²', 'ü', '&', 'G', 'ì', '\u0099', '\u008A', 'q', 'F', '\u0000', 'É', '.', '­', '·', 'Õ', 'ì', 'â', ']', 'Û', '¹', 'â', 'ÿ', 'Z', '6', '°', '×', '¾', 'A', '|', 'Ç', '÷', 'ã', 'Z', 'È', '\u0003', 'ñ', 'ª', '+', 'Õ', '\u0090', '`', '¹', '\u0083', '7', '\u0094', 'P', 'á', 'J', 'Z', 'µ', '\u008A', '\u0098', '4', '\u008C', 'M', '\u008B', 'v', '\u0093', '\u007F', '.', ')', 't', 'ñ', '\r', '2', '°', '¾', 'o', 'V', '½', '|', 'Ã', 'Ý', '?', 'õ', 'ð', 'à', 'Ò', '=', 'õ', 'Á', 'r', 'Â', '\u008E', 'á', 'º', '\u0095', 'x', 'ç', '2', 'Ç', '\u0082', '+', 'á', '\u0015', '\u009F', 'È', '÷', '\u008A', 'f', 'u', 'V', 'd', 'Í', 'º', '¸', 'a', 'P', '?', '¬', '¶', ':', '\u000F', '\u009B', '×', 'ö', 'Ï', ')', '¤', '\u0016', '\u008E', '\u0090', 'å', 'à', '\u0001', '\u0000', 'î', 'U', 'î', 'J', '\r', 'ñ', '\u0088', '°', 'Ä', 'á', 'ñ', 'Ë', 'j', 'ô', 'J', '\u0002', 'q', '\u009A', 'ý', '\u001B', '\u0000', '\u0089', '²', '\u0019', 'æ', '¾', '^', '\u009E', '\u000B', '5', '0', '\u008E', 'N', 'm', 'Í', '5', '^', 'Ç', '\u000F', '?', '¨', '=', '\u000E', '±', 'w', '\'', 'õ', '\u0097', '\u0000', '\u0096', '\u0015', '÷', '\u0098', '\b', '\u0094', 'w', '0', 'u', '\u0097', 'k', 'ñ', '+', '~', '\u001E', 'S', '¯', '\u0088', '\u000B', '\u0097', '-', '¨', '\u0091', 'Ô', '4', 'ü', '\u0005', '¬', '\u0092', '8', 'L', 'Ú', '»', 'z', '*', '\u0089', 'Ô', ' ', '[', '\u009C', '÷', '\u0000', '\u0090', '<', 'Þ', '\u008D', 'é', 'ç', '[', '¾', 'q', ')', '\u0080', '\u0096', 'E', '¬', '\u0005', '¯', '\u0015', 'Á', 'È', '\u009B', '\u0092', '\u0080', 'Å', '2', 'Â', '¦', '±', 'ì', 'G', '\u001B', '\u0018', '\u001B', '®', 'Ó', '\u0094', 'ù', '¥', '\u000F', 'D', '\u009F', 'ã', 'È', '\u0091', 'Ü', 'Ö', '\u0080', '\u009C', '\u0002', 'q', 'w', 'u', '\u0084', '|', '|', '\u0007', '\u001C', '\u000E', '0', '\u0087', '\u0086', 'Ô', '\u0080', 'À', '­', 'Þ', '\u0004', '»', 'Ò', '.', '4', 'Z', ']', '`', '\u001E', '\u008E', 'H', '\u0000', 'b', '\u0017', 'n', 'ñ', 'j', 'õ', 'é', '<', '\u008C', 'Ø', 'å', '\u001F', 'È', 'R', '|', '\u0019', '6', 'D', 'I', 'ª', '\u0091', '`', '£', '\u009E', '<', 'S', '³', '\u0087', '\u0007', 'Ç', '\u0015', 'ö', 'Ó', '?', '{', '\u0007', 'x', '\u000E', '±', 'A', '°', 'W', 'µ', 'S', '\f', 'ú', '*', '\u0005', 'ö', 'T', '%', 'w', '\u008A', 'ô', 'Â', 'D', '\u001C', 'H', 'È', 'ç', '¦', 'û', 'í', '5', '\u008B', 'Ã', '\u008B', '\u0004', '\u0014', 'ý', '\u0015', '¿', 'Ú', '®', 'V', '­', '!', 's', '\u0088', '÷', ')', 'Í', 'ô', '\u0080', '\u0019', '\u0089', '½', '\u0093', '¸', 'ý', '%', '0', 'ñ', '\u0003', '\u000F', '©', '\t', 'æ', 'U', '\"', '$', '?', '\u009C', 'à', '\u0005', '\'', '\u000E', 'Å', 'î', '8', '5', 'Ã', 'À', '\u0097', '\u0012', '·', '\u0092', 'Û', '\u000E', 'Ù', '¿', '\u000B', '\u008A', '¦', '¤', '\u007F', 'Ô', 'i', 'C', 'n', 'Ê', '\u0007', 'H', '£', '\u001A', 'T', 'î', 'Å', 'ø', 'y', ';', '\u0089', '\u0087', 'ô', 'Ä', 'ð', '-', 'E', 'w', 'U', 'b', '\u0085', 'T', '½', 'V', 'o', ')', 'ê', '×', 'N', '%', '\t', '\u009A', '\u008D', '6', '\u0014', 'Ô', '\u0090', '·', '°', '\u0090', '¶', '\u0084', '\u0014', 'Ö', '\u0003', 'X', '@', '½', 'b', 'A', 'Û', '´', '$', '¶', 'Ô', 'L', '¡', 'Û', '±', 'ø', '\u0098', '¤', 'ë', '-', '\u0083', 'y', 'µ', '\u001D', 'ï', '&', '\u009F', ':', '\u0010', 'µ', 'Ó', 'Ë', 'Å', 'î', 'Õ', '\u0005', 'O', '¡', '\u0013', 't', 'ø', '-', 'u', 'ë', '/', 'Ò', '#', '\u0087', 'q', '«', 'ð', '·', '²', 'Å', '(', '\u0017', 'ô', 'Ñ', '\u001F', '\u0007', 'Þ', '\u0095', '[', 'ó', 'Ë', 't', '0', 'V', '4', 'ý', 'x', '\u0080', 'Ä', '|', '\u0084', '\'', '\u008F', 'v', 'ï', 'Æ', '\u0087', '\u0092', 'ì', 'D', 'W', '1', '8', 'v', '\u0084', 'f', 'Í', 'f', '´', '\u0098', 'a', 'É', '\u0081', '´', '¯', 'ä', '\u0093', 'í', 'é', '0', '¨', '\u001B', '¤', '/', 'Ë', '\'', '}', '\u0016', 'ò', 'w', 'þ', '^', 'é', '\u0004', '\u001E', 'b', '°', 'á', 'r', '\u0097', ']', 'â', '«', '\u000B', ':', '¦', 'Õ', 'Ý', '\u001F', 'p', '|', '.', 'Â', 'î', '©', '\u0095', '@', '«', 'P', 'ü', '<', '\u001F', '\u001A', '¥', 'Ò', '`', '¶', 'V', 'v', 'á', '\u0019', '\u0097', '.', ';', '¹', '\u0007', '{', 'ü', 'o', '\u008A', '²', '¡', 'Õ', '^', 'Ô', 'I', '±', '\u008E', 'Ë', '¬', '?', 'Ë', 'À', '¶', '\u0010', '\f', 'h', '\u0015', 'F', 'ª', '£', '_', 's', '»', '_', '\"', 'a', '®', '·', '\u009C', 'C', 'º', '\u009D', '©', '>', '¡', '³', 'r', '#', '\u0002', '(', '\u0002', 'Ã', '.', '\u0090', '\u0099', 'É', 'þ', 'p', '¾', '3', '\u000E', '\u0018', '\f', 'M', 'Ò', '=', 'Y', '\u0017', '¦', 'Â', 'U', '.', '/', '\u009D', ')', '@', '\u0098', 'µ', 'j', 'b', '=', ';', '\u0088', '\u0011', 'Ð', 'È', 'þ', '\u0007', '¯', 'N', '\n', 'Y', '·', '?', '\u001C', 'É', 'ò', 'ß', '\u001D', '²', '\u009B', '>', '\u0080', 'T', 'à', '§', 'c', '\u0005', 'I', 't', ':', 'd', 'z', '\u008B', '¾', 'M', 'j', 'd', '+', 'Ò', 'P', '@', 'Y', '¹', 'ù', '[', '¤', '£', 'Ã', '¯', '=', 'U', '\u0091', 'º', 'b', '¤', '7', 'Ü', 'â', 'µ', 'C', '\u0088', '\u0087', 'p', 'ú', '+', 'ù', '\u008A', 'g', 'w', '\u0004', 'î', 'm', 'Õ', 'ú', 'Û', '\u0096', '\u0006', 'ê', '>', '\u0087', '\u0007', 'p', 'Ü', 'ø', 'K', 'u', '\u0003', ' ', 'Î', '^', '\u0017', '!', '\u0011', '\'', 'Ñ', '\u0002', 'Ë', 'ß', 'á', 'x', 'v', ',', '\u0002', '<', '\\', 'À', '\u0006', '~', '\u0093', 'Ú', 'F', '\u0011', '\u000E', '\r', 'ë', 'Á', 'Ú', 'ñ', 'Ç', '\u009A', 't', '\u0096', '»', '\u0016', 'Ä', 'ú', '®', 'g', 'E', 'm', 'X', 'º', 'Y', 'ú', '½', '\u0086', '\u001F', '=', '\u009C', '´', '\u009B', 'R', '\u008E', '}', '5', 'ë', 'z', '0', 'è', '¿', 'Q', '\u0094', 'ï', 'l', '\\', 'L', 'À', 'Î', 'G', '~', 'K', 'K', 'Ý', 'C', 'V', '\u0003', '6', '\u0082', '\n', 'L', '_', ':', 'ä', '%', '\u0083', 'Z', 'u', ';', '\u0093', '0', '\u0089', '¨', '\u0006', 'V', 'ñ', '\u0082', 'M', 'Ð', 'h', '\u0000', 'æ', '\u0095', '\u008C', '³', '\u0011', 'Ñ', 'ç', 'þ', 'Á', 'Ø', '¤', 'G', 'R', '\u0013', '\u0081', 'q', 'å', '\u0094', ' ', '\u0086', 'ù', 'j', 'Ø', 'ù', '×', '«', '\u008A', '\u008A', '¥', 'U', '\u0005', ' ', '·', 'Ï', '\u0000', '\u0094', '\'', 'Õ', 'y', '°', '\u000B', '\u008A', 'x', '\u008B', 'ÿ', 'J', 'F', '©', '\u000E', 'L', '\u0003', '\u0096', '\u008F', '\\', '\u009B', 'Ô', '­', '\u0018', '\u0088', '\u0096', 'm', '\u0000', 'm', 'é', 'Æ', '\u009B', '°', 'Ö', '\u0098', '£', 'b', ';', '\u009F', '\u0007', 'Ä', '¡', 'ß', ' ', 'q', 'u', 'û', 'õ', '\u0014', '\u008D', '¨', 'ª', 'æ', 'ý', 'o', 'Z', '»', '¨', '\u0096', '\u008E', 'q', '§', 'o', 'ø', '\u0099', 'Û', 'å', '\u007F', 'q', 't', '¸', '¦', '!', 'F', '¦', ',', '1', 'D', 'î', '^', 'm', 'p', '\f', 'ù', 'm', 'Ù', '[', 'o', '^', ':', 'ä', '}', 'T', 'ò', 'q', 'ß', '\u0010', '\u0093', '®', 'K', 'Þ', '\u001B', 'ü', 'Å', 'r', '\u0083', '-', '-', 'U', '·', 'J', 'z', 'Z', 'R', 'ñ', '\u0005', 'Ð', 'à', '\u0006', 'ä', 'Î', '\u0086', '-', '\u0092', '\u0083', 'l', 's', 'x', 'Ê', '[', '\\', '\u001A', '?', '\u009A', '\u0082', 'Ü', 'F', '²', 'F', 'Ë', 'ã', 'º', '\u0086', '¦', '°', 'õ', '#', '8', ' ', 'Ç', '\'', '/', 'ó', 'É', '\u000E', 'k', 'Z', '8', '¯', 'ó', 'Q', 'ê', '\u001C', 'Z', 'e', '£', 'Â', '®', '\u0083', '\u000F', '.', '\u0088', 'Y', 'z', 'g', '\u0098', '9', '\u0013', '¦', '\u0004', 'Ô', '\u0016', '\u000B', 'Ì', 'ö', '>', 'è', '_', '*', '\u0082', '\u0086', '5', '´', '\n', 'ì', 'ë', 'Æ', 'Ý', 'Ð', 'ä', '\f', 'µ', 'Ú', '¤', 'Ë', '\u0084', '¿', 'Ø', 'å', '\u0093', 'ÿ', '7', 'y', '\u0083', 'X', 'ì', '%', '\u001F', 'Ý', 'ò', 'È', 'Ç', 'Ä', '\u0098', '\u0097', 'Û', 'ý', 'J', '<', 'è', '\u0085', 'Õ', '\u009F', '+', 'û', '¯', '°', 'G', '\u007F', 'g', '\u0017', 'q', 'û', '\u0099', 'Û', '­', 'õ', '^', '&', '[', '\u0090', '\u0098', 'ã', '!', 'I', '\u0011', 'w', 'd', '§', '§', 'ä', 'ô', 'å', '6', '?', 'S', 'Í', '\r', '\u0091', 'º', 'O', 'Ü', '3', '\u008A', '!', '\u0003', 'Ü', '\u009D', 'Ä', '\u0015', 'Ø', 'Ì', 'ë', '\u0089', 'à', 'Õ', 'Þ', '^', 'ã', '6', '­', '\u0092', 'Æ', ',', '\b', 'i', 'N', 'x', '\u0018', 'ª', 'á', 'f', 'o', 'Ê', 'A', '\u0018', '\u0017', '»', 'J', '±', 'y', 'à', '\u0004', '¦', '\u001E', 'æ', '{', 'ï', 'z', '\u001B', 'Ö', 'Î', '\u0014', '\u0093', '#', '6', '°', 'D', '¯', '5', '\u008E', '\u001E', '»', '\u009A', '¨', '\u0006', '`', '\u001C', '@', 'M', 'ç', '¾', 'O', '¹', ':', 'h', '°', 'i', 'r', '\u0013', '§', 'ä', '\u008C', '\u0095', 'Ñ', 'X', '\n', '\u000E', 'æ', 'õ', '¥', 'ô', 'M', '\u0081', 'F', '|', '~', '¼', 'Å', 's', 'Å', '&', 'j', 'ª', 'Q', 'Z', '\u0002', '\u0083', 'C', 'ò', 'ñ', 'ã', 'Ú', 'Ü', '\u0001', '\u001D', '\u0082', 'K', '\u0090', 'f', 'F', 'Î', '­', 'Ö', '@', '5', 'þ', '@', 'û', 'ð', '\b', 'X', 'Ó', '°', '2', 'µ', '\b', 'Y', '¯', '\u0002', '`', '\u0016', '\u008B', '\u009F', 'u', '=', 'Z', 'r', '\u0003', 'Å', 'W', 'k', 'Ó', 'F', '\u001A', '*', '*', 'Õ', '¥', 'É', '5', '·', '~', '\u0091', 'M', '¯', 'v', '=', '1', '\n', '\u0014', 'ñ', '\u008E', '\n', 'õ', 'Ê', '-', 'Ï', '\u0006', ':', '\u008B', '¢', '.', '\u0095', 'v', 'T', '¬', 'K', '\t', ' ', '\u001D', 'ç', 'è', 'ô', 'j', '\u008B', '¯', '\u009D', '¨', '.', 'f', 'î', 'Ò', 'µ', 'Û', '\u0015', 'Æ', '\u009C', '¡', 'í', 'Á', 'Û', '#', 'x', '\u0089', 'O', '\u0006', 'ù', 'ë', '\u0014', '§', '\u0011', 'ä', '\u0000', 'Ù', '¼', '¯', '\u001F', 'd', 'Å', 'Ê', 'î', 'L', 'ê', '\u0087', '°', '8', 'Ü', '\u0006', 'j', 'Ù', 'j', 'Ô', 'ï', '¬', '(', '\u000B', '2', '\u007F', '±', '{', '2', '\u0081', 'ä', 'ø', 'Ú', 'B', 'D', '^', 'J', 'Í', 'å', '\u0085', '{', '(', '\u0083', '\u001E', 'Ö', 'Ê', '5', 'º', 'c', 'q', '\f', '9', 'É', ';', '\u0018', 'n', '\u0014', '»', '\u0092', '2', '\u0012', '`', 'K', 'å', 'I', '\t', 'ü', 'I', '\u0088', '¾', '\b', ',', 'û', '\u0089', 'd', '÷', '\u0083', '\u0007', 'Õ', 'º', 'Å', '¬', 'Ù', 'n', 'Ã', '\u0001', 'H', 'w', '¬', 'c', 'Ê', '*', '²', 'Â', ' ', '³', '\u0002', 'ÿ', '%', 'i', '&', '+', 'g', 'w', '\u0087', 'Î', 'p', '6', 'Ì', 'S', '\u0002', '\u0090', '\\', '1', '\b', '=', '\u0017', '\u000E', '\t', 'J', '\u0092', 'Y', 'Ì', '\u0094', '\u0083', '÷', '³', '\u0080', 'U', 'p', '$', 'Ð', 'µ', 'Ç', '\u0087', '»', 'c', 'Ê', '\u0099', 'g', '\u000E', 'Û', '£', '\u0098', '\u0002', ':', 'Ã', '¬', '\u0089', '!', '\u0094', 'R', '@', 'a', 'f', '\u0006', '±', '\u0097', '\u001A', 'ý', '\u000B', 'º', 'Æ', 'k', 'v', 'Ö', 'X', 'R', 'k', ';', '¼', 'I', '|', '÷', 'U', '/', 'ê', 'à', '\u0003', 'a', '\u0018', 'Ç', '@', '{', '~', '½', 'û', '\u000B', '\u0003', '\u0096', '«', '\u0097', '£', '\'', 'D', '×', 'g', 'ó', '\u0098', '{', 'ÿ', 'á', 'P', 'ô', '`', 'P', 'Ô', '\u001B', 'ê', 'b', 'F', '®', '\u0081', '\u0099', '\u001D', '\u008A', 'W', '\n', '¦', '´', '\u0096', 'Ì', 'd', 'ü', ':', 'a', ':', '÷', 'D', '\u0086', '1', 's', '\u0015', 'ð', '\u0014', '\u001B', 'b', '\u0081', 'ý', '\f', '\u0007', '\u0083', 'Ú', '\u0092', 'L', '½', '¯', 'Á', '_', '\u0017', '\r', 'Û', '¿', '\u008A', '\u0086', 'R', 'U', '¥', 'X', ')', '6', '1', 'Y', '\u0081', 'I', '\u0018', '\b', '0', '\n', '\u0086', '\u0011', 'Ñ', '\u0011', 'k', '\u0003', 'b', '!', '\u0088', '\u0081', '§', '\u009A', 'r', '\u0094', 'w', '7', ' ', ' ', 'P', 'Ï', '\u0081', '\u0010', 'À', 'b', 'g', '¸', ';', '\u009E', 'k', 'î', '(', '»', '¢', '\u0097', ' ', 'õ', '\u0017', '¾', 'ê', '5', 'f', 'd', '\u009C', '¨', 'v', '·', '\u009B', 'v', '\u0003', 'Ñ', 'ø', '°', 'c', 'ó', '\u000B', '3', '\u0001', 'Å', 'Â', '5', 'à', '\u009B', '\u0018', 'ì', '\u008E', '\u0002', '\u009F', '\u009C', 'K', 'O', '±', 'x', '^', '\u0086', '\u0007', '\u0094', '\u008B', 'Ü', '\u0006', 'ß', 'Ñ', 'ì', 'B', '\u009B', '«', '\u008F', '1', '\r', 'ú', '+', '-', '8', '¦', 'C', 'ò', 'Þ', '+', 't', 'ô', '\u008F', ' ', '{', '2', 'Ó', '`', '1', 'X', 'ì', 'ì', '´', 'e', '\u000E', 'ú', 'Z', 'e', '·', '\u000E', '\u0084', '\u0098', '#', '\'', 'o', 'z', '¸', ' ', '\u0098', '¦', '\u0090', 'n', 'I', '\u009F', '\u009D', '\u0005', '\u0086', 'E', '7', '¯', 'á', '«', 'y', '\u0018', '!', '\u0014', '\u007F', 'M', 'f', '\u000B', '#', '\u0000', '\u008D', '\u001B', 'G', '\u0099', '\u008E', '¦', 'Á', '0', 'í', 'Ý', '«', '_', '2', 'Ô', 'Ä', 'à', 'Y', 'õ', '²', '\u0099', '\u0005', '®', '¼', 'Q', ',', '¦', 'Ò', '&', 'º', '§', 'f', 'e', 'E', 'Í', ']', '{', 'd', 'Á', 'ä', '\"', '£', '\u008F', '0', 'H', '¥', '¡', '!', '*', 'z', 'ý', 'Õ', '9', '\u0098', '²', '\u0091', 'Ã', 'r', 'e', 'ñ', '\u0001', 'Ñ', '·', 'ò', '×', 'ç', '\u008C', '=', '\u001B', '\u0011', '¿', 'p', 'p', '¡', 'À', '\u009E', 'ñ', 'ß', '\u009B', '%', '$', '\u009B', 'Á', '¦', ' ', '^', '\u0006', '\u0019', '®', '·', '\u008E', 'I', '§', '\u0093', '®', '\u0013', '­', '¿', '¥', 'F', 'e', '\u009E', '1', '¨', '\u001F', '\r', '\u0093', '×', ' ', '.', 'L', 'Ë', '\u0001', '\u0086', 'l', 'Ú', 'x', '\u0005', 'k', '@', 'Ñ', ']', '\u0014', 'g', 'L', 'å', '·', '\u0004', '\u008E', '\u001C', '>', 'W', '\u0018', '!', 'F', '¦', '}', '\u0014', '\u0083', 'ÿ', '\u0014', 'Ô', '¬', '\u009B', '7', '\u001F', '\u007F', ' ', '\u008F', '\\', 'á', '\u0013', '>', '\b', '\u001A', '0', '>', 'g', '1', 'c', 'Ó', 'ô', 'Ý', '÷', 'g', '¥', '³', '3', 'î', 'y', 'v', '\u009F', 'J', '7', 'ß', '\"', '¾', '?', '\u000E', ';', 'e', 'z', '\u0089', ',', 'ü', '¨', 'n', 'r', '\t', 'ª', '\u0081', 'Ð', 'î', '\u0086', ',', 'i', 'M', '\u0010', '^', '\\', '\"', '.', 'm', '¸', '»', '\u009E', '{', '¾', 's', '¤', 'ì', '¡', '\u0096', 'u', '\\', 'ù', '\u0014', '­', 'F', '\u0097', '-', '\f', '\u001B', 'ê', '\u001F', '­', 'Ú', 'ò', 'W', 'G', 'ñ', 'ñ', 'Ô', '¯', '\u0019', '\u001D', 'ë', 'É', '\u0011', 'é', 'ì', 'C', '\u008A', 'l', 'P', '\u0006', 'û', '\b', 'e', '\"', 't', '¯', 'C', '\u000B', '_', 'v', '´', '4', 'B', 'ÿ', '\u001C', 'Þ', '¸', ';', 'ö', 'ð', '\u0086', 'D', 'k', '\r', 'A', 'E', 'õ', '¥', '·', 'Õ', '¤', 'Æ', 'R', '¸', 'å', 'ô', 'Ý', '\u001A', '¼', 'E', '¬', 'è', '\u0090', 'Ý', '&', '\u0085', '.', 'ô', 'Ý', '­', 'k', '\u0007', '­', '×', '&', 'G', '\u0011', '0', 'ï', ',', '£', 'þ', 'Þ', 'Ñ', 'Y', '÷', '*', '\u001A', 'r', '\u000E', '\u0085', 'ò', 'Ò', '\u008D', '¾', '`', '²', 'Ç', '6', '©', 'ñ', 'B', '\u001E', 'ë', '\u009F', 'Á', '3', 'b', 'Í', '\u009C', 'k', 'à', ':', 'E', ':', '\u0086', '£', 'Q', 'ç', 'ó', 'â', '8', 'R', '{', ',', '#', 'Ô', '+', '\u0017', 'È', '\u0004', 'º', 'Ý', 'Q', '·', 'ó', '\u008D', 'q', '_', '©', '©', 'í', '\u009E', '#', 'À', 'è', '£', '(', '\u0004', '\u009C', '\u001E', '÷', 'É', '=', 'Å', '\u0018', ' ', '\n', 'Ô', '\f', 'è', '*', 'X', '´', '\u0091', '\u009B', '\'', 'à', 'w', '%', 'Æ', '§', 'ò', '\u0017', '\n', 'ò', 'R', '¯', 'Î', '\u009E', '\u0097', 'p', 'Z', '*', '%', 'Ó', '¹', '\u008F', 'Ç', 'c', 'å', ' ', '\u0091', 'º', '\u0018', 'Ü', ' ', 'E', 'Ð', '±', '°', 'h', '¤', 'ß', 'û', 'È', '\u008C', '\u000B', '\u0017', 'm', ']', '\u0019', 'P', '»', '\u0099', 'e', 'C', '·', 'v', 'i', 'ù', 'Ð', '\u000F', '6', '\u0017', 'ì', 'µ', '\u0016', '¢', '\f', '\u0086', 'þ', '\u0085', '\u000F', '1', '\u0010', '\u009A', 'J', '\u001B', '\u001C', 'à', 'ý', 'Ý', 'U', 'f', '$', '²', 'Î', 'í', 'E', '}', '×', '\u0084', '\u0092', 'A', 'j', 'ç', 'þ', '\u008C', '\u0014', 'ÿ', 'p', '.', '\u0018', 'D', 'u', '·', 'Ë', 'd', 'ú', 'ç', 'Z', '÷', '\"', 'Ñ', '<', '^', '\u0004', '÷', '¶', '\u0017', 'å', '¼', '\b', 'B', '[', 'æ', '¸', 'r', '\u0088', 'r', '\u0081', 'õ', '\u0007', '4', ':', ']', '5', '4', '\u0017', 'w', '÷', '¯', '#', '\\', 'Ù', '\u0092', '*', 'Y', '8', 'S', '¥', 'É', '\u001C', 'h', '¯', '^', 's', 'A', 'J', 'Þ', '¼', '·', 'k', '\u0013', 'X', '\u009D', '\u007F', 'd', '\u0015', '3', 'æ', '\u007F', 'Ö', 'x', '\u0083', '²', '\u0093', 'D', '\u0091', '\u0010', 'ý', '¢', 'J', '\b', 'ñ', '´', 'û', 'û', '\u008D', 'T', ';', 'ú', '\u0093', 'S', '°', 'ô', 'W', 'o', 'U', '4', 'ý', '¶', '!', 'Q', '%', 'r', 'Î', '\u0017', 'ä', '\u0096', 'A', '\u0010', '­', '\u007F', '\u0013', 'ÿ', 'õ', '*', '¸', '\u007F', '\u0080', '\u0095', '\u0098', 'P', '\u009E', '\u0095', '°', '^', 'ã', 'À', 'Q', 'k', '\"', 'T', 'û', '¿', 'è', 'È', '\u008D', '¬', '\r', '\u009C', '\u0007', '\u009D', '\u0086', 'Ó', '0', '#', ')', 'j', 'o', 'Ê', '\u001A', '§', 'Ó', 'õ', 'P', 'õ', 'q', 'ª', 's', '\u0091', 'p', '\u000B', '+', 'ã', 'Ø', 'û', 'Ú', '\u001A', '\f', '\u0010', '\f', 'ù', 'z', 'å', 'Î', 'X', '¼', '\u0098', 'õ', '\r', '§', '\u0012', 'g', 'á', 's', 'q', 'l', 'à', '\u0098', '\u0096', '5', 'Ë', '¸', 'ñ', '\u009C', 'á', '\u0007', '7', '¼', '`', '¾', '\u0080', 'þ', '\u0017', '\u009C', 'G', '\u0005', '_', 'R', '\u0019', '\u000E', 'c', '\"', '\"', '\u0011', 'â', '¹', 'ù', 'à', '¸', 'Ð', 'V', 'ë', '\u0016', 'O', 't', '3', '^', '\r', 'Ü', 'b', 'y', '³', 'p', '\u0004', '=', '¤', 'õ', 'l', '\u0005', 'H', '\u0092', 'ã', '_', 'A', 'C', '§', 'í', '\u0003', '-', 'N', '@', 'ú', '\u0094', '²', 'H', 'è', 'Z', '\t', '.', '¹', 'õ', 'B', '(', 'ò', 'Ì', '\u0000', '§', '#', ',', '*', '1', 'Ñ', 'F', '}'};
        arr_v[0] = 1;
        for(int v = 1; v < 0x100; ++v) {
            int v1 = Rijndael_Algorithm.alog[v - 1];
            int v2 = v1 ^ v1 << 1;
            Rijndael_Algorithm.alog[v] = (v2 & 0x100) == 0 ? v1 ^ v1 << 1 : v2 ^ 283;
        }
        for(int v3 = 1; v3 < 0xFF; ++v3) {
            Rijndael_Algorithm.log[Rijndael_Algorithm.alog[v3]] = v3;
        }
        byte[][] arr2_b = {new byte[]{1, 1, 1, 1, 1, 0, 0, 0}, new byte[]{0, 1, 1, 1, 1, 1, 0, 0}, new byte[]{0, 0, 1, 1, 1, 1, 1, 0}, new byte[]{0, 0, 0, 1, 1, 1, 1, 1}, new byte[]{1, 0, 0, 0, 1, 1, 1, 1}, new byte[]{1, 1, 0, 0, 0, 1, 1, 1}, new byte[]{1, 1, 1, 0, 0, 0, 1, 1}, new byte[]{1, 1, 1, 1, 0, 0, 0, 1}};
        Class class0 = Byte.TYPE;
        Object object0 = Array.newInstance(class0, new int[]{0x100, 8});
        ((byte[][])object0)[1][7] = 1;
        for(int v4 = 2; v4 < 0x100; ++v4) {
            int v5 = Rijndael_Algorithm.alog[0xFF - Rijndael_Algorithm.log[v4]];
            for(int v6 = 0; v6 < 8; ++v6) {
                ((byte[][])object0)[v4][v6] = (byte)(v5 >>> 7 - v6 & 1);
            }
        }
        byte[][] arr2_b1 = (byte[][])Array.newInstance(class0, new int[]{0x100, 8});
        for(int v7 = 0; v7 < 0x100; ++v7) {
            for(int v8 = 0; v8 < 8; ++v8) {
                arr2_b1[v7][v8] = new byte[]{0, 1, 1, 0, 0, 0, 1, 1}[v8];
                for(int v9 = 0; v9 < 8; ++v9) {
                    byte[] arr_b = arr2_b1[v7];
                    arr_b[v8] = (byte)(arr_b[v8] ^ arr2_b[v8][v9] * ((byte[][])object0)[v7][v9]);
                }
            }
        }
        for(int v10 = 0; v10 < 0x100; ++v10) {
            Rijndael_Algorithm.S[v10] = (byte)(arr2_b1[v10][0] << 7);
            for(int v11 = 1; v11 < 8; ++v11) {
                Rijndael_Algorithm.S[v10] = (byte)(Rijndael_Algorithm.S[v10] ^ arr2_b1[v10][v11] << 7 - v11);
            }
            Rijndael_Algorithm.Si[Rijndael_Algorithm.S[v10] & 0xFF] = (byte)v10;
        }
        byte[][] arr2_b2 = {new byte[]{2, 1, 1, 3}, new byte[]{3, 2, 1, 1}, new byte[]{1, 3, 2, 1}, new byte[]{1, 1, 3, 2}};
        Object object1 = Array.newInstance(class0, new int[]{4, 8});
        for(int v12 = 0; v12 < 4; ++v12) {
            for(int v13 = 0; v13 < 4; ++v13) {
                ((byte[][])object1)[v12][v13] = arr2_b2[v12][v13];
            }
            ((byte[][])object1)[v12][v12 + 4] = 1;
        }
        byte[][] arr2_b3 = (byte[][])Array.newInstance(class0, new int[]{4, 4});
        for(int v14 = 0; true; ++v14) {
            if(v14 >= 4) {
                for(int v15 = 0; v15 < 4; ++v15) {
                    for(int v16 = 0; v16 < 4; ++v16) {
                        arr2_b3[v15][v16] = ((byte[][])object1)[v15][v16 + 4];
                    }
                }
                for(int v17 = 0; v17 < 0x100; ++v17) {
                    int v18 = Rijndael_Algorithm.S[v17];
                    Rijndael_Algorithm.T1[v17] = Rijndael_Algorithm.mul4(v18, arr2_b2[0]);
                    Rijndael_Algorithm.T2[v17] = Rijndael_Algorithm.mul4(v18, arr2_b2[1]);
                    Rijndael_Algorithm.T3[v17] = Rijndael_Algorithm.mul4(v18, arr2_b2[2]);
                    Rijndael_Algorithm.T4[v17] = Rijndael_Algorithm.mul4(v18, arr2_b2[3]);
                    int v19 = Rijndael_Algorithm.Si[v17];
                    Rijndael_Algorithm.T5[v17] = Rijndael_Algorithm.mul4(v19, arr2_b3[0]);
                    Rijndael_Algorithm.T6[v17] = Rijndael_Algorithm.mul4(v19, arr2_b3[1]);
                    Rijndael_Algorithm.T7[v17] = Rijndael_Algorithm.mul4(v19, arr2_b3[2]);
                    Rijndael_Algorithm.T8[v17] = Rijndael_Algorithm.mul4(v19, arr2_b3[3]);
                    Rijndael_Algorithm.U1[v17] = Rijndael_Algorithm.mul4(v17, arr2_b3[0]);
                    Rijndael_Algorithm.U2[v17] = Rijndael_Algorithm.mul4(v17, arr2_b3[1]);
                    Rijndael_Algorithm.U3[v17] = Rijndael_Algorithm.mul4(v17, arr2_b3[2]);
                    Rijndael_Algorithm.U4[v17] = Rijndael_Algorithm.mul4(v17, arr2_b3[3]);
                }
                Rijndael_Algorithm.rcon[0] = 1;
                int v20 = 1;
                for(int v21 = 1; v21 < 30; ++v21) {
                    v20 = Rijndael_Algorithm.mul(2, v20);
                    Rijndael_Algorithm.rcon[v21] = (byte)v20;
                }
                return;
            }
            int v22 = ((byte[][])object1)[v14][v14];
            if(v22 == 0) {
                int v23;
                for(v23 = v14 + 1; ((byte[][])object1)[v23][v14] == 0 && v23 < 4; ++v23) {
                }
                if(v23 == 4) {
                    throw new RuntimeException("G matrix is not invertible");
                }
                for(int v24 = 0; v24 < 8; ++v24) {
                    byte[] arr_b1 = ((byte[][])object1)[v14];
                    byte b = arr_b1[v24];
                    byte[] arr_b2 = ((byte[][])object1)[v23];
                    arr_b1[v24] = arr_b2[v24];
                    arr_b2[v24] = b;
                }
                v22 = ((byte[][])object1)[v14][v14];
            }
            int v25 = v22;
            for(int v26 = 0; v26 < 8; ++v26) {
                byte[] arr_b3 = ((byte[][])object1)[v14];
                int v27 = arr_b3[v26];
                if(v27 != 0) {
                    arr_b3[v26] = (byte)Rijndael_Algorithm.alog[(Rijndael_Algorithm.log[v27 & 0xFF] + 0xFF - Rijndael_Algorithm.log[v25 & 0xFF]) % 0xFF];
                }
            }
            for(int v28 = 0; v28 < 4; ++v28) {
                if(v14 != v28) {
                    for(int v29 = v14 + 1; v29 < 8; ++v29) {
                        byte[] arr_b4 = ((byte[][])object1)[v28];
                        int v30 = arr_b4[v29];
                        arr_b4[v29] = (byte)(Rijndael_Algorithm.mul(((byte[][])object1)[v14][v29], arr_b4[v14]) ^ v30);
                    }
                    ((byte[][])object1)[v28][v14] = 0;
                }
            }
        }
    }

    public static byte[] Decrypt(byte[] arr_b, int v, int v1, int v2) {
        int v11;
        Object object0;
        int v9;
        String s1;
        String s = new String(Rijndael_Algorithm.pKEYs);
        char[] arr_c = new char[0x20];
        byte[] arr_b1 = new byte[16];
        for(int v3 = 0; v3 < 16; ++v3) {
            arr_b1[v3] = 0;
        }
        byte[] arr_b2 = new byte[16];
        for(int v4 = 0; v4 < 16; ++v4) {
            arr_b2[v4] = 0;
        }
        new ByteArrayOutputStream(16);
        byte[] arr_b3 = new byte[v1];
        for(int v5 = 0; v5 < v1; ++v5) {
            arr_b3[v5] = 0;
        }
        if(arr_b != null && v >= 16 && v2 >= 0 && v2 <= 0x2000) {
            int v6 = v2 & 1;
            int v7 = 0x2000 - (v2 >> 1);
            int v8 = v6 <= 0 ? 16 : 17;
            if(v7 >= v8) {
                s1 = s.substring(v2 >> 1, (v2 >> 1) + v8 + 1);
            }
            else {
                String s2 = s.substring(v2 >> 1, v7);
                s2.concat(s.substring(0, v8 - v7 + 1));
                s1 = s2;
            }
            char[] arr_c1 = s1.toCharArray();
            if(v6 > 0) {
                arr_c[0] = Rijndael_Algorithm.FBIT2CHAR(arr_c1[0] & 15);
                v9 = 1;
            }
            else {
                v9 = 0;
            }
            while(v6 < v8) {
                int v10 = v9 + 1;
                arr_c[v9] = Rijndael_Algorithm.FBIT2CHAR(arr_c1[v6] >> 4);
                v9 += 2;
                arr_c[v10] = Rijndael_Algorithm.FBIT2CHAR(arr_c1[v6] & 15);
                ++v6;
            }
            try {
                object0 = Rijndael_Algorithm.makeKey(new String(arr_c).getBytes(), 16);
                v11 = 0;
            }
            catch(Exception exception0) {
                System.out.println("Exception encountered during MakeKey() : " + exception0.getMessage());
                exception0.printStackTrace();
                return "MAKEKEY ERROR".getBytes();
            }
            do {
                for(int v12 = 0; v12 < 16; ++v12) {
                    arr_b1[v12] = 0;
                }
                for(int v13 = 0; v13 < 16; ++v13) {
                    arr_b2[v13] = 0;
                }
                if(v - v11 > 16) {
                    int v14 = v11;
                    int v15 = 0;
                    while(v15 < 16) {
                        arr_b1[v15] = arr_b[v14];
                        ++v15;
                        ++v14;
                    }
                }
                else {
                    int v16 = v11;
                    for(int v17 = 0; v17 < 16; ++v17) {
                        if(v16 < v) {
                            arr_b1[v17] = arr_b[v16];
                            ++v16;
                        }
                        else {
                            arr_b1[v17] = 0;
                        }
                    }
                }
                arr_b2 = Rijndael_Algorithm.blockDecrypt(arr_b1, 0, object0, 16);
                int v18 = v11;
                int v19 = 0;
                while(v19 < 16) {
                    arr_b3[v18] = arr_b2[v19];
                    ++v19;
                    ++v18;
                }
                v11 += 16;
            }
            while(v11 < v1);
            return arr_b3;
        }
        return arr_b == null ? "NULL".getBytes() : "INPUT DATA ERROR".getBytes();
    }

    public static byte[] Decrypt_String(byte[] arr_b, int v) {
        byte[] arr_b1 = new byte[v];
        for(int v2 = 0; v2 < v; ++v2) {
            arr_b1[v2] = 0;
        }
        char[] arr_c = new char[v];
        for(int v3 = 0; v3 < v; ++v3) {
            arr_c[v3] = '\u0000';
        }
        if(v < 0) {
            return new byte[]{69, 82, 82, 0x4F, 82, 0};
        }
        for(int v4 = 0; v4 < v; ++v4) {
            arr_b1[v4] = arr_b[v4];
        }
        if(v % 4 != 0) {
            return new byte[]{69, 69, 69, 69, 69, 0};
        }
        char[] arr_c1 = b64.b64decode_str(arr_b1, v);
        byte[] arr_b2 = new byte[v];
        for(int v5 = 0; v5 < v; ++v5) {
            arr_b2[v5] = 0;
        }
        byte[] arr_b3 = new byte[v];
        for(int v6 = 0; v6 < v; ++v6) {
            arr_b3[v6] = 0;
        }
        int v7 = arr_c1[0];
        for(int v8 = 0; v8 < v7; ++v8) {
            arr_b2[v8] = (byte)arr_c1[v8 + 1];
        }
        if(v7 % 16 != 0) {
            --v7;
        }
        int v9 = 16;
        if(v7 >= 16) {
            if(v7 % 16 == 0) {
                v9 = 16 * (v7 / 16);
            }
            else if(v7 % 16 > 0) {
                v9 = 16 * (v7 / 16 + 1);
            }
            else {
                v9 = 0;
            }
        }
        byte[] arr_b4 = Rijndael_Algorithm.Decrypt(arr_b2, v7, v9, 404);
        byte[] arr_b5 = new byte[arr_b4.length];
        for(int v10 = 0; v10 < arr_b4.length; ++v10) {
            arr_b5[v10] = 0;
        }
        for(int v1 = 0; v1 < arr_b4.length; ++v1) {
            arr_b5[v1] = arr_b4[v1];
        }
        return arr_b5;
    }

    public static byte[] Encrypt(byte[] arr_b, int v, int v1, int v2) {
        int v9;
        Object object0;
        int v7;
        String s1;
        byte[] arr_b1 = new byte[v1 + 0x80];
        for(int v3 = 0; v3 < v1 + 0x80; ++v3) {
            arr_b1[v3] = 0;
        }
        char[] arr_c = new char[0x20];
        String s = new String(Rijndael_Algorithm.pKEYs);
        byte[] arr_b2 = new byte[16];
        byte[] arr_b3 = new byte[16];
        if(v1 >= 16 && v2 >= 0 && v2 <= 0x2000) {
            int v4 = v2 & 1;
            int v5 = 0x2000 - (v2 >> 1);
            int v6 = v4 <= 0 ? 16 : 17;
            if(v5 >= v6) {
                s1 = s.substring(v2 >> 1, (v2 >> 1) + v6 + 1);
            }
            else {
                s1 = s.substring(v2 >> 1, v5);
                s1.concat(s.substring(0, v6 - v5 + 1));
            }
            char[] arr_c1 = s1.toCharArray();
            if(v4 > 0) {
                arr_c[0] = Rijndael_Algorithm.FBIT2CHAR(arr_c1[0] & 15);
                v7 = 1;
            }
            else {
                v7 = 0;
            }
            while(v4 < v6) {
                int v8 = v7 + 1;
                arr_c[v7] = Rijndael_Algorithm.FBIT2CHAR(arr_c1[v4] >> 4);
                v7 += 2;
                arr_c[v8] = Rijndael_Algorithm.FBIT2CHAR(arr_c1[v4] & 15);
                ++v4;
            }
            try {
                object0 = Rijndael_Algorithm.makeKey(new String(arr_c).getBytes(), 16);
                v9 = 0;
            }
            catch(Exception exception0) {
                System.out.println("Exception Encountered During MakeKey:  " + exception0.getMessage());
                exception0.printStackTrace();
                return "MAKEKEY ERROR".getBytes();
            }
            do {
                for(int v10 = 0; v10 < 16; ++v10) {
                    arr_b2[v10] = 0;
                }
                for(int v11 = 0; v11 < 16; ++v11) {
                    arr_b3[v11] = 0;
                }
                if(v - v9 >= 16) {
                    int v12 = v9;
                    int v13 = 0;
                    while(v13 < 16) {
                        arr_b2[v13] = arr_b[v12];
                        ++v13;
                        ++v12;
                    }
                }
                else {
                    int v14 = v9;
                    for(int v15 = 0; v15 < 16; ++v15) {
                        if(v14 < v) {
                            arr_b2[v15] = arr_b[v14];
                            ++v14;
                        }
                        else {
                            arr_b2[v15] = 0;
                        }
                    }
                }
                arr_b3 = Rijndael_Algorithm.blockEncrypt(arr_b2, 0, object0, 16);
                int v16 = v9;
                for(int v17 = 0; v17 < 16; ++v17) {
                    arr_b1[v16] = arr_b3[v17];
                    ++v16;
                }
                v9 += 16;
            }
            while(v9 < v);
            return arr_b1;
        }
        return "WRONG INPUT DATA".getBytes();
    }

    public static byte[] Encrypt_String(byte[] arr_b, int v) {
        int v3;
        int v2 = 16;
        if(v >= 16) {
            if(v % 16 == 0) {
                v2 = 16 * (v / 16);
            }
            else if(v % 16 > 0) {
                v2 = 16 * (v / 16 + 1);
            }
            else {
                v2 = 0;
            }
        }
        if(v2 % 3 == 0) {
            v3 = v2 / 3 * 4;
        }
        else if(v2 % 3 > 0) {
            v3 = (v2 / 3 + 1) * 4;
        }
        else {
            v3 = 0;
        }
        byte[] arr_b1 = new byte[v2];
        for(int v4 = 0; v4 < v2; ++v4) {
            arr_b1[v4] = 0;
        }
        byte[] arr_b2 = new byte[v];
        for(int v5 = 0; v5 < v; ++v5) {
            arr_b2[v5] = arr_b[v5];
        }
        byte[] arr_b3 = Rijndael_Algorithm.Encrypt(arr_b2, v, v2, 404);
        Rijndael_Algorithm.Decrypt(arr_b3, v2, v2, 404);
        byte[] arr_b4 = new byte[v2];
        for(int v6 = 0; v6 < v2; ++v6) {
            arr_b4[v6] = 0;
        }
        for(int v7 = 0; v7 < v2; ++v7) {
            arr_b4[v7] = arr_b3[v7];
        }
        new char[v3];
        char[] arr_c = b64.b64encode_str(arr_b4, v2);
        byte[] arr_b5 = new byte[v3];
        for(int v8 = 0; v8 < v3; ++v8) {
            arr_b5[v8] = 0;
        }
        for(int v1 = 0; true; ++v1) {
            if(v1 >= v3) {
                return arr_b5;
            }
            byte b = (byte)arr_c[v1];
            arr_b5[v1] = b;
            if(b < 0 || b > 0x7F) {
                break;
            }
        }
        return new byte[]{69, 82, 82, 0x4F, 82, 0};
    }

    public static char FBIT2CHAR(int v) {
        return (v & 15) < 10 ? ((char)((v & 15) + 0x30)) : ((char)((v & 15) + 87));
    }

    public static final char[] MakeCipherKey(char[] arr_c, int v) {
        int v6;
        int v4;
        char[] arr_c1 = new char[v];
        int v1 = -1;
        for(int v2 = 0; true; ++v2) {
            if(v2 >= v) {
                return arr_c1;
            }
            int v3 = arr_c[v1 + 1];
            v1 += 2;
            if(v3 >= 0x30 && v3 <= 57) {
                v4 = v3 - 0x30;
            }
            else if(v3 < 97 || v3 > 102) {
                if(v3 < 65 || v3 > 70) {
                    break;
                }
                v4 = v3 - 55;
            }
            else {
                v4 = v3 - 87;
            }
            int v5 = arr_c[v1];
            if(v5 >= 0x30 && v5 <= 57) {
                v6 = v5 - 0x30;
            }
            else if(v5 < 97 || v5 > 102) {
                if(v5 < 65 || v5 > 70) {
                    break;
                }
                v6 = v5 - 55;
            }
            else {
                v6 = v5 - 87;
            }
            arr_c1[v2] = (char)(v4 << 4 ^ v6);
        }
        return new char[]{'\u0000', '\u0000'};
    }

    public static void Print_Usage() {
        System.out.println("USAGE : ");
        System.out.println(" encrypted output string method : ");
        System.out.print("java Rijndael_Algorithm \"-encrypt\" \"String to be encrypted\"\n");
        System.out.println();
        System.out.println(" decrypted output string method : ");
        System.out.print("java Rijndael_Algorithm \"-decrypt\" \"String to be decrypted\"\n");
        System.out.println();
    }

    private static boolean areEqual(byte[] arr_b, byte[] arr_b1) {
        if(arr_b.length != arr_b1.length) {
            return false;
        }
        for(int v = 0; true; ++v) {
            if(v >= arr_b.length) {
                return true;
            }
            if(arr_b[v] != arr_b1[v]) {
                return false;
            }
        }
    }

    public static byte[] blockDecrypt(byte[] arr_b, int v, Object object0) {
        int[][] arr2_v = (int[][])((Object[])object0)[1];
        int v1 = arr2_v.length - 1;
        int[] arr_v = arr2_v[0];
        int v2 = ((arr_b[v + 1] & 0xFF) << 16 | (arr_b[v] & 0xFF) << 24 | (arr_b[v + 2] & 0xFF) << 8 | arr_b[v + 3] & 0xFF) ^ arr_v[0];
        int v3 = ((arr_b[v + 5] & 0xFF) << 16 | (arr_b[v + 4] & 0xFF) << 24 | (arr_b[v + 6] & 0xFF) << 8 | arr_b[v + 7] & 0xFF) ^ arr_v[1];
        int v4 = ((arr_b[v + 9] & 0xFF) << 16 | (arr_b[v + 8] & 0xFF) << 24 | (arr_b[v + 10] & 0xFF) << 8 | arr_b[v + 11] & 0xFF) ^ arr_v[2];
        int v5 = arr_v[3] ^ ((arr_b[v + 12] & 0xFF) << 24 | (arr_b[v + 13] & 0xFF) << 16 | (arr_b[v + 14] & 0xFF) << 8 | arr_b[v + 15] & 0xFF);
        int v6 = 1;
        while(v6 < v1) {
            int[] arr_v1 = arr2_v[v6];
            int v7 = Rijndael_Algorithm.T5[v2 >>> 24 & 0xFF] ^ Rijndael_Algorithm.T6[v5 >>> 16 & 0xFF] ^ Rijndael_Algorithm.T7[v4 >>> 8 & 0xFF] ^ Rijndael_Algorithm.T8[v3 & 0xFF] ^ arr_v1[0];
            int v8 = Rijndael_Algorithm.T5[v3 >>> 24 & 0xFF] ^ Rijndael_Algorithm.T6[v2 >>> 16 & 0xFF] ^ Rijndael_Algorithm.T7[v5 >>> 8 & 0xFF] ^ Rijndael_Algorithm.T8[v4 & 0xFF] ^ arr_v1[1];
            int v9 = Rijndael_Algorithm.T6[v3 >>> 16 & 0xFF] ^ Rijndael_Algorithm.T5[v4 >>> 24 & 0xFF] ^ Rijndael_Algorithm.T7[v2 >>> 8 & 0xFF] ^ Rijndael_Algorithm.T8[v5 & 0xFF] ^ arr_v1[2];
            v5 = Rijndael_Algorithm.T5[v5 >>> 24 & 0xFF] ^ Rijndael_Algorithm.T6[v4 >>> 16 & 0xFF] ^ Rijndael_Algorithm.T7[v3 >>> 8 & 0xFF] ^ Rijndael_Algorithm.T8[v2 & 0xFF] ^ arr_v1[3];
            ++v6;
            v2 = v7;
            v4 = v9;
            v3 = v8;
        }
        int[] arr_v2 = arr2_v[v1];
        int v10 = arr_v2[0];
        byte b = (byte)(Rijndael_Algorithm.Si[v2 >>> 24 & 0xFF] ^ v10 >>> 24);
        byte b1 = (byte)(Rijndael_Algorithm.Si[v5 >>> 16 & 0xFF] ^ v10 >>> 16);
        byte b2 = (byte)(Rijndael_Algorithm.Si[v4 >>> 8 & 0xFF] ^ v10 >>> 8);
        byte b3 = (byte)(v10 ^ Rijndael_Algorithm.Si[v3 & 0xFF]);
        int v11 = arr_v2[1];
        byte b4 = (byte)(Rijndael_Algorithm.Si[v3 >>> 24 & 0xFF] ^ v11 >>> 24);
        byte b5 = (byte)(Rijndael_Algorithm.Si[v2 >>> 16 & 0xFF] ^ v11 >>> 16);
        byte b6 = (byte)(Rijndael_Algorithm.Si[v5 >>> 8 & 0xFF] ^ v11 >>> 8);
        byte b7 = (byte)(v11 ^ Rijndael_Algorithm.Si[v4 & 0xFF]);
        int v12 = arr_v2[2];
        byte b8 = (byte)(Rijndael_Algorithm.Si[v4 >>> 24 & 0xFF] ^ v12 >>> 24);
        byte b9 = (byte)(Rijndael_Algorithm.Si[v3 >>> 16 & 0xFF] ^ v12 >>> 16);
        byte b10 = (byte)(Rijndael_Algorithm.Si[v2 >>> 8 & 0xFF] ^ v12 >>> 8);
        byte b11 = (byte)(Rijndael_Algorithm.Si[v5 & 0xFF] ^ v12);
        int v13 = arr_v2[3];
        return new byte[]{b, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, ((byte)(Rijndael_Algorithm.Si[v5 >>> 24 & 0xFF] ^ v13 >>> 24)), ((byte)(Rijndael_Algorithm.Si[v4 >>> 16 & 0xFF] ^ v13 >>> 16)), ((byte)(Rijndael_Algorithm.Si[v3 >>> 8 & 0xFF] ^ v13 >>> 8)), ((byte)(Rijndael_Algorithm.Si[v2 & 0xFF] ^ v13))};
    }

    public static byte[] blockDecrypt(byte[] arr_b, int v, Object object0, int v1) {
        int v4;
        if(v1 == 16) {
            return Rijndael_Algorithm.blockDecrypt(arr_b, v, object0);
        }
        int[][] arr2_v = (int[][])((Object[])object0)[1];
        int v2 = arr2_v.length - 1;
        if(v1 / 4 == 4) {
            v4 = 0;
        }
        else {
            v4 = v1 / 4 == 6 ? 1 : 2;
        }
        int[][] arr2_v1 = Rijndael_Algorithm.shifts[v4];
        int v5 = arr2_v1[1][1];
        int v6 = arr2_v1[2][1];
        int v7 = arr2_v1[3][1];
        int[] arr_v = new int[v1 / 4];
        int[] arr_v1 = new int[v1 / 4];
        byte[] arr_b1 = new byte[v1];
        int v8 = v;
        for(int v9 = 0; v9 < v1 / 4; ++v9) {
            int v10 = v8 + 3;
            int v11 = (arr_b[v8 + 1] & 0xFF) << 16 | (arr_b[v8] & 0xFF) << 24 | (arr_b[v8 + 2] & 0xFF) << 8;
            v8 += 4;
            arr_v1[v9] = (v11 | arr_b[v10] & 0xFF) ^ arr2_v[0][v9];
        }
        for(int v12 = 1; v12 < v2; ++v12) {
            for(int v13 = 0; v13 < v1 / 4; ++v13) {
                arr_v[v13] = Rijndael_Algorithm.T5[arr_v1[v13] >>> 24 & 0xFF] ^ Rijndael_Algorithm.T6[arr_v1[(v13 + v5) % (v1 / 4)] >>> 16 & 0xFF] ^ Rijndael_Algorithm.T7[arr_v1[(v13 + v6) % (v1 / 4)] >>> 8 & 0xFF] ^ Rijndael_Algorithm.T8[arr_v1[(v13 + v7) % (v1 / 4)] & 0xFF] ^ arr2_v[v12][v13];
            }
            System.arraycopy(arr_v, 0, arr_v1, 0, v1 / 4);
        }
        int v14 = 0;
        for(int v3 = 0; v3 < v1 / 4; ++v3) {
            int v15 = arr2_v[v2][v3];
            arr_b1[v14] = (byte)(Rijndael_Algorithm.Si[arr_v1[v3] >>> 24 & 0xFF] ^ v15 >>> 24);
            arr_b1[v14 + 1] = (byte)(Rijndael_Algorithm.Si[arr_v1[(v3 + v5) % (v1 / 4)] >>> 16 & 0xFF] ^ v15 >>> 16);
            int v16 = v14 + 3;
            arr_b1[v14 + 2] = (byte)(Rijndael_Algorithm.Si[arr_v1[(v3 + v6) % (v1 / 4)] >>> 8 & 0xFF] ^ v15 >>> 8);
            v14 += 4;
            arr_b1[v16] = (byte)(v15 ^ Rijndael_Algorithm.Si[arr_v1[(v3 + v7) % (v1 / 4)] & 0xFF]);
        }
        return arr_b1;
    }

    public static byte[] blockEncrypt(byte[] arr_b, int v, Object object0) {
        int[][] arr2_v = (int[][])((Object[])object0)[0];
        int v1 = arr2_v.length - 1;
        int[] arr_v = arr2_v[0];
        int v2 = ((arr_b[v + 1] & 0xFF) << 16 | (arr_b[v] & 0xFF) << 24 | (arr_b[v + 2] & 0xFF) << 8 | arr_b[v + 3] & 0xFF) ^ arr_v[0];
        int v3 = ((arr_b[v + 5] & 0xFF) << 16 | (arr_b[v + 4] & 0xFF) << 24 | (arr_b[v + 6] & 0xFF) << 8 | arr_b[v + 7] & 0xFF) ^ arr_v[1];
        int v4 = ((arr_b[v + 9] & 0xFF) << 16 | (arr_b[v + 8] & 0xFF) << 24 | (arr_b[v + 10] & 0xFF) << 8 | arr_b[v + 11] & 0xFF) ^ arr_v[2];
        int v5 = arr_v[3] ^ ((arr_b[v + 12] & 0xFF) << 24 | (arr_b[v + 13] & 0xFF) << 16 | (arr_b[v + 14] & 0xFF) << 8 | arr_b[v + 15] & 0xFF);
        int v6 = 1;
        while(v6 < v1) {
            int[] arr_v1 = arr2_v[v6];
            int v7 = Rijndael_Algorithm.T1[v2 >>> 24 & 0xFF] ^ Rijndael_Algorithm.T2[v3 >>> 16 & 0xFF] ^ Rijndael_Algorithm.T3[v4 >>> 8 & 0xFF] ^ Rijndael_Algorithm.T4[v5 & 0xFF] ^ arr_v1[0];
            int v8 = Rijndael_Algorithm.T1[v3 >>> 24 & 0xFF] ^ Rijndael_Algorithm.T2[v4 >>> 16 & 0xFF] ^ Rijndael_Algorithm.T3[v5 >>> 8 & 0xFF] ^ Rijndael_Algorithm.T4[v2 & 0xFF] ^ arr_v1[1];
            int v9 = Rijndael_Algorithm.T2[v5 >>> 16 & 0xFF] ^ Rijndael_Algorithm.T1[v4 >>> 24 & 0xFF] ^ Rijndael_Algorithm.T3[v2 >>> 8 & 0xFF] ^ Rijndael_Algorithm.T4[v3 & 0xFF] ^ arr_v1[2];
            v5 = Rijndael_Algorithm.T1[v5 >>> 24 & 0xFF] ^ Rijndael_Algorithm.T2[v2 >>> 16 & 0xFF] ^ Rijndael_Algorithm.T3[v3 >>> 8 & 0xFF] ^ Rijndael_Algorithm.T4[v4 & 0xFF] ^ arr_v1[3];
            ++v6;
            v2 = v7;
            v4 = v9;
            v3 = v8;
        }
        int[] arr_v2 = arr2_v[v1];
        int v10 = arr_v2[0];
        byte b = (byte)(Rijndael_Algorithm.S[v2 >>> 24 & 0xFF] ^ v10 >>> 24);
        byte b1 = (byte)(Rijndael_Algorithm.S[v3 >>> 16 & 0xFF] ^ v10 >>> 16);
        byte b2 = (byte)(Rijndael_Algorithm.S[v4 >>> 8 & 0xFF] ^ v10 >>> 8);
        byte b3 = (byte)(v10 ^ Rijndael_Algorithm.S[v5 & 0xFF]);
        int v11 = arr_v2[1];
        byte b4 = (byte)(Rijndael_Algorithm.S[v3 >>> 24 & 0xFF] ^ v11 >>> 24);
        byte b5 = (byte)(Rijndael_Algorithm.S[v4 >>> 16 & 0xFF] ^ v11 >>> 16);
        byte b6 = (byte)(Rijndael_Algorithm.S[v5 >>> 8 & 0xFF] ^ v11 >>> 8);
        byte b7 = (byte)(v11 ^ Rijndael_Algorithm.S[v2 & 0xFF]);
        int v12 = arr_v2[2];
        byte b8 = (byte)(Rijndael_Algorithm.S[v4 >>> 24 & 0xFF] ^ v12 >>> 24);
        byte b9 = (byte)(Rijndael_Algorithm.S[v5 >>> 16 & 0xFF] ^ v12 >>> 16);
        byte b10 = (byte)(Rijndael_Algorithm.S[v2 >>> 8 & 0xFF] ^ v12 >>> 8);
        byte b11 = (byte)(Rijndael_Algorithm.S[v3 & 0xFF] ^ v12);
        int v13 = arr_v2[3];
        return new byte[]{b, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, ((byte)(Rijndael_Algorithm.S[v5 >>> 24 & 0xFF] ^ v13 >>> 24)), ((byte)(Rijndael_Algorithm.S[v2 >>> 16 & 0xFF] ^ v13 >>> 16)), ((byte)(Rijndael_Algorithm.S[v3 >>> 8 & 0xFF] ^ v13 >>> 8)), ((byte)(Rijndael_Algorithm.S[v4 & 0xFF] ^ v13))};
    }

    public static byte[] blockEncrypt(byte[] arr_b, int v, Object object0, int v1) {
        int v4;
        if(v1 == 16) {
            return Rijndael_Algorithm.blockEncrypt(arr_b, v, object0);
        }
        int[][] arr2_v = (int[][])((Object[])object0)[0];
        int v3 = arr2_v.length - 1;
        if(v1 / 4 == 4) {
            v4 = 0;
        }
        else {
            v4 = v1 / 4 == 6 ? 1 : 2;
        }
        int[][] arr2_v1 = Rijndael_Algorithm.shifts[v4];
        int v5 = arr2_v1[1][0];
        int v6 = arr2_v1[2][0];
        int v7 = arr2_v1[3][0];
        int[] arr_v = new int[v1 / 4];
        int[] arr_v1 = new int[v1 / 4];
        byte[] arr_b1 = new byte[v1];
        int v8 = v;
        for(int v9 = 0; v9 < v1 / 4; ++v9) {
            int v10 = v8 + 3;
            int v11 = (arr_b[v8 + 1] & 0xFF) << 16 | (arr_b[v8] & 0xFF) << 24 | (arr_b[v8 + 2] & 0xFF) << 8;
            v8 += 4;
            arr_v1[v9] = (v11 | arr_b[v10] & 0xFF) ^ arr2_v[0][v9];
        }
        for(int v12 = 1; v12 < v3; ++v12) {
            for(int v13 = 0; v13 < v1 / 4; ++v13) {
                arr_v[v13] = Rijndael_Algorithm.T1[arr_v1[v13] >>> 24 & 0xFF] ^ Rijndael_Algorithm.T2[arr_v1[(v13 + v5) % (v1 / 4)] >>> 16 & 0xFF] ^ Rijndael_Algorithm.T3[arr_v1[(v13 + v6) % (v1 / 4)] >>> 8 & 0xFF] ^ Rijndael_Algorithm.T4[arr_v1[(v13 + v7) % (v1 / 4)] & 0xFF] ^ arr2_v[v12][v13];
            }
            System.arraycopy(arr_v, 0, arr_v1, 0, v1 / 4);
        }
        int v14 = 0;
        for(int v2 = 0; v2 < v1 / 4; ++v2) {
            int v15 = arr2_v[v3][v2];
            arr_b1[v14] = (byte)(Rijndael_Algorithm.S[arr_v1[v2] >>> 24 & 0xFF] ^ v15 >>> 24);
            arr_b1[v14 + 1] = (byte)(Rijndael_Algorithm.S[arr_v1[(v2 + v5) % (v1 / 4)] >>> 16 & 0xFF] ^ v15 >>> 16);
            int v16 = v14 + 3;
            arr_b1[v14 + 2] = (byte)(Rijndael_Algorithm.S[arr_v1[(v2 + v6) % (v1 / 4)] >>> 8 & 0xFF] ^ v15 >>> 8);
            v14 += 4;
            arr_b1[v16] = (byte)(v15 ^ Rijndael_Algorithm.S[arr_v1[(v2 + v7) % (v1 / 4)] & 0xFF]);
        }
        return arr_b1;
    }

    public static int blockSize() {
        return 16;
    }

    private static String byteToString(int v) {
        return new String(new char[]{Rijndael_Algorithm.HEX_DIGITS[v >>> 4 & 15], Rijndael_Algorithm.HEX_DIGITS[v & 15]});
    }

    public static void debug(String s) {
        Rijndael_Algorithm.err.println(">>> Rijndael_Algorithm: " + s);
    }

    public static int getRounds(int v, int v1) {
        switch(v) {
            case 16: {
                if(v1 == 16) {
                    return 10;
                }
                return v1 == 24 ? 12 : 14;
            }
            case 24: {
                return v1 == 0x20 ? 14 : 12;
            }
            default: {
                return 14;
            }
        }
    }

    private static String intToString(int v) {
        char[] arr_c = new char[8];
        for(int v1 = 7; v1 >= 0; --v1) {
            arr_c[v1] = Rijndael_Algorithm.HEX_DIGITS[v & 15];
            v >>>= 4;
        }
        return new String(arr_c);
    }

    public static Object makeKey(byte[] arr_b) {
        return Rijndael_Algorithm.makeKey(arr_b, 16);
    }

    public static Object makeKey(byte[] arr_b, int v) {
        int[][] arr2_v1;
        int[][] arr2_v;
        synchronized(Rijndael_Algorithm.class) {
            char[] arr_c = new char[arr_b.length];
            for(int v2 = 0; v2 < arr_b.length; ++v2) {
                arr_c[v2] = (char)arr_b[v2];
            }
            for(int v3 = 0; v3 < arr_b.length; ++v3) {
                arr_b[v3] = 0;
            }
            char[] arr_c1 = Rijndael_Algorithm.MakeCipherKey(arr_c, 16);
            if(arr_c1[0] == 0 && arr_c1.length == 0) {
                throw new InvalidKeyException("BAD_KEY_MAT");
            }
            if(arr_c1.length != 16 && arr_c1.length != 24 && arr_c1.length != 0x20) {
                throw new InvalidKeyException("Incorrect key length");
            }
            int v4 = Rijndael_Algorithm.getRounds(arr_c1.length, v);
            int[] arr_v = new int[2];
            arr_v[1] = v / 4;
            arr_v[0] = v4 + 1;
            Class class1 = Integer.TYPE;
            arr2_v = (int[][])Array.newInstance(class1, arr_v);
            arr2_v1 = (int[][])Array.newInstance(class1, new int[]{v4 + 1, v / 4});
            int v6 = (v4 + 1) * (v / 4);
            int v7 = arr_c1.length / 4;
            int[] arr_v1 = new int[v7];
            int v9 = 0;
            for(int v8 = 0; v8 < v7; ++v8) {
                int v10 = v9 + 3;
                int v11 = (arr_c1[v9 + 1] & 0xFF) << 16 | (arr_c1[v9] & 0xFF) << 24 | (arr_c1[v9 + 2] & 0xFF) << 8;
                v9 += 4;
                arr_v1[v8] = v11 | arr_c1[v10] & 0xFF;
            }
            int v12 = 0;
            int v13;
            for(v13 = 0; v12 < v7 && v13 < v6; ++v13) {
                arr2_v[v13 / (v / 4)][v13 % (v / 4)] = arr_v1[v12];
                arr2_v1[v4 - v13 / (v / 4)][v13 % (v / 4)] = arr_v1[v12];
                ++v12;
            }
            for(int v14 = 0; v13 < v6; ++v14) {
                int v15 = arr_v1[v7 - 1];
                arr_v1[0] ^= (Rijndael_Algorithm.S[v15 >>> 16 & 0xFF] & 0xFF) << 24 ^ (Rijndael_Algorithm.S[v15 >>> 8 & 0xFF] & 0xFF) << 16 ^ (Rijndael_Algorithm.S[v15 & 0xFF] & 0xFF) << 8 ^ Rijndael_Algorithm.S[v15 >>> 24 & 0xFF] & 0xFF ^ (Rijndael_Algorithm.rcon[v14] & 0xFF) << 24;
                if(v7 == 8) {
                    int v19 = 1;
                    for(int v18 = 0; v19 < 4; ++v18) {
                        arr_v1[v19] ^= arr_v1[v18];
                        ++v19;
                    }
                    int v20 = arr_v1[3];
                    arr_v1[4] ^= (Rijndael_Algorithm.S[v20 >>> 24 & 0xFF] & 0xFF) << 24 ^ (Rijndael_Algorithm.S[v20 & 0xFF] & 0xFF ^ (Rijndael_Algorithm.S[v20 >>> 8 & 0xFF] & 0xFF) << 8 ^ (Rijndael_Algorithm.S[v20 >>> 16 & 0xFF] & 0xFF) << 16);
                    int v22 = 5;
                    for(int v21 = 4; v22 < 8; ++v21) {
                        arr_v1[v22] ^= arr_v1[v21];
                        ++v22;
                    }
                }
                else {
                    int v16 = 1;
                    for(int v17 = 0; v16 < v7; ++v17) {
                        arr_v1[v16] ^= arr_v1[v17];
                        ++v16;
                    }
                }
                int v23 = 0;
                while(v23 < v7 && v13 < v6) {
                    arr2_v[v13 / (v / 4)][v13 % (v / 4)] = arr_v1[v23];
                    arr2_v1[v4 - v13 / (v / 4)][v13 % (v / 4)] = arr_v1[v23];
                    ++v23;
                    ++v13;
                }
            }
            for(int v5 = 1; v5 < v4; ++v5) {
                for(int v24 = 0; v24 < v / 4; ++v24) {
                    int[] arr_v2 = arr2_v1[v5];
                    int v25 = arr_v2[v24];
                    arr_v2[v24] = Rijndael_Algorithm.U4[v25 & 0xFF] ^ (Rijndael_Algorithm.U1[v25 >>> 24 & 0xFF] ^ Rijndael_Algorithm.U2[v25 >>> 16 & 0xFF] ^ Rijndael_Algorithm.U3[v25 >>> 8 & 0xFF]);
                }
            }
        }
        return new Object[]{arr2_v, arr2_v1};
    }

    public static final int mul(int v, int v1) {
        return v == 0 || v1 == 0 ? 0 : Rijndael_Algorithm.alog[(Rijndael_Algorithm.log[v & 0xFF] + Rijndael_Algorithm.log[v1 & 0xFF]) % 0xFF];
    }

    public static final int mul4(int v, byte[] arr_b) {
        int v1 = 0;
        if(v == 0) {
            return 0;
        }
        int[] arr_v = Rijndael_Algorithm.log;
        int v2 = arr_v[v & 0xFF];
        int v3 = arr_b[0];
        int v4 = v3 == 0 ? 0 : Rijndael_Algorithm.alog[(arr_v[v3 & 0xFF] + v2) % 0xFF] & 0xFF;
        int v5 = arr_b[1];
        int v6 = v5 == 0 ? 0 : Rijndael_Algorithm.alog[(arr_v[v5 & 0xFF] + v2) % 0xFF] & 0xFF;
        int v7 = arr_b[2];
        int v8 = v7 == 0 ? 0 : Rijndael_Algorithm.alog[(arr_v[v7 & 0xFF] + v2) % 0xFF] & 0xFF;
        int v9 = arr_b[3];
        if(v9 != 0) {
            v1 = Rijndael_Algorithm.alog[(v2 + arr_v[v9 & 0xFF]) % 0xFF] & 0xFF;
        }
        return v4 << 24 | v6 << 16 | v8 << 8 | v1;
    }

    public static boolean self_test() {
        return Rijndael_Algorithm.self_test(16);
    }

    private static boolean self_test(int v) {
        boolean z;
        byte[] arr_b1;
        byte[] arr_b;
        try {
            arr_b = new byte[16];
            arr_b1 = new byte[16];
            byte[] arr_b2 = new byte[v];
            for(int v1 = 0; v1 < v; ++v1) {
                arr_b2[v1] = (byte)v1;
            }
            arr_b1 = "aaaaaaaaaaaaaaaa".getBytes();
            Object object0 = Rijndael_Algorithm.makeKey(arr_b2, 16);
            arr_b = Rijndael_Algorithm.blockDecrypt(Rijndael_Algorithm.blockEncrypt(arr_b1, 0, object0, 16), 0, object0, 16);
            z = Rijndael_Algorithm.areEqual(arr_b1, arr_b);
        }
        catch(Exception exception0) {
            z = false;
            goto label_20;
        }
        if(!z) {
            try {
                System.out.println("THE ERROR!!!!!");
                throw new RuntimeException("Symmetric operation failed");
            }
            catch(Exception exception0) {
            }
        label_20:
            System.out.println("Exception encountered during self-test: " + exception0.getMessage());
            exception0.printStackTrace();
        }
        System.out.println("Self-test OK? " + z);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(16);
        byteArrayOutputStream0.write(arr_b1, 0, 16);
        System.out.println("++2++ The Input was [" + byteArrayOutputStream0.toString() + "]");
        ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(16);
        byteArrayOutputStream1.write(arr_b, 0, 16);
        System.out.println("The Output is [" + byteArrayOutputStream1.toString() + "]");
        return z;
    }

    private static String toString(byte[] arr_b) {
        char[] arr_c = new char[arr_b.length * 2];
        int v1 = 0;
        for(int v = 0; v < arr_b.length; ++v) {
            int v2 = arr_b[v];
            int v3 = v1 + 1;
            arr_c[v1] = Rijndael_Algorithm.HEX_DIGITS[v2 >>> 4 & 15];
            v1 += 2;
            arr_c[v3] = Rijndael_Algorithm.HEX_DIGITS[v2 & 15];
        }
        return new String(arr_c);
    }

    private static String toString(int[] arr_v) {
        char[] arr_c = new char[arr_v.length * 8];
        int v1 = 0;
        for(int v = 0; v < arr_v.length; ++v) {
            int v2 = arr_v[v];
            arr_c[v1] = Rijndael_Algorithm.HEX_DIGITS[v2 >>> 28 & 15];
            arr_c[v1 + 1] = Rijndael_Algorithm.HEX_DIGITS[v2 >>> 24 & 15];
            arr_c[v1 + 2] = Rijndael_Algorithm.HEX_DIGITS[v2 >>> 20 & 15];
            arr_c[v1 + 3] = Rijndael_Algorithm.HEX_DIGITS[v2 >>> 16 & 15];
            arr_c[v1 + 4] = Rijndael_Algorithm.HEX_DIGITS[v2 >>> 12 & 15];
            arr_c[v1 + 5] = Rijndael_Algorithm.HEX_DIGITS[v2 >>> 8 & 15];
            int v3 = v1 + 7;
            arr_c[v1 + 6] = Rijndael_Algorithm.HEX_DIGITS[v2 >>> 4 & 15];
            v1 += 8;
            arr_c[v3] = Rijndael_Algorithm.HEX_DIGITS[v2 & 15];
        }
        return new String(arr_c);
    }

    public static void trace(String s) {
        if(Rijndael_Algorithm.TRACE) {
            Rijndael_Algorithm.err.println("<=> Rijndael_Algorithm." + s);
        }
    }

    public static void trace(boolean z, String s) {
        if(Rijndael_Algorithm.TRACE) {
            Rijndael_Algorithm.err.println((z ? "==> " : "<== ") + "Rijndael_Algorithm." + s);
        }
    }
}

