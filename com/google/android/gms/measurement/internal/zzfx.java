package com.google.android.gms.measurement.internal;

import com.google.android.gms.internal.measurement.zzoy;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;

public final class zzfx {
    public static final zzfw zzA;
    public static final zzfw zzB;
    public static final zzfw zzC;
    public static final zzfw zzD;
    public static final zzfw zzE;
    public static final zzfw zzF;
    public static final zzfw zzG;
    public static final zzfw zzH;
    public static final zzfw zzI;
    public static final zzfw zzJ;
    public static final zzfw zzK;
    public static final zzfw zzL;
    public static final zzfw zzM;
    public static final zzfw zzN;
    public static final zzfw zzO;
    public static final zzfw zzP;
    public static final zzfw zzQ;
    public static final zzfw zzR;
    public static final zzfw zzS;
    public static final zzfw zzT;
    public static final zzfw zzU;
    public static final zzfw zzV;
    public static final zzfw zzW;
    public static final zzfw zzX;
    public static final zzfw zzY;
    public static final zzfw zzZ;
    public static final zzfw zza;
    public static final zzfw zzaA;
    public static final zzfw zzaB;
    public static final zzfw zzaC;
    public static final zzfw zzaD;
    public static final zzfw zzaE;
    public static final zzfw zzaF;
    public static final zzfw zzaG;
    public static final zzfw zzaH;
    public static final zzfw zzaI;
    public static final zzfw zzaJ;
    public static final zzfw zzaK;
    public static final zzfw zzaL;
    public static final zzfw zzaM;
    public static final zzfw zzaN;
    public static final zzfw zzaO;
    public static final zzfw zzaP;
    public static final zzfw zzaQ;
    public static final zzfw zzaR;
    public static final zzfw zzaS;
    public static final zzfw zzaT;
    public static final zzfw zzaU;
    public static final zzfw zzaV;
    public static final zzfw zzaW;
    public static final zzfw zzaX;
    public static final zzfw zzaY;
    public static final zzfw zzaZ;
    public static final zzfw zzaa;
    public static final zzfw zzab;
    public static final zzfw zzac;
    public static final zzfw zzad;
    public static final zzfw zzae;
    public static final zzfw zzaf;
    public static final zzfw zzag;
    public static final zzfw zzah;
    public static final zzfw zzai;
    public static final zzfw zzaj;
    public static final zzfw zzak;
    public static final zzfw zzal;
    public static final zzfw zzam;
    public static final zzfw zzan;
    public static final zzfw zzao;
    public static final zzfw zzap;
    public static final zzfw zzaq;
    public static final zzfw zzar;
    public static final zzfw zzas;
    public static final zzfw zzat;
    public static final zzfw zzau;
    public static final zzfw zzav;
    public static final zzfw zzaw;
    public static final zzfw zzax;
    public static final zzfw zzay;
    public static final zzfw zzaz;
    public static final zzfw zzb;
    public static final zzfw zzba;
    public static final zzfw zzbb;
    public static final zzfw zzbc;
    public static final zzfw zzbd;
    public static final zzfw zzbe;
    public static final zzfw zzbf;
    public static final zzfw zzbg;
    public static final zzfw zzbh;
    public static final zzfw zzbi;
    public static final zzfw zzbj;
    private static final List zzbk;
    public static final zzfw zzc;
    public static final zzfw zzd;
    public static final zzfw zze;
    public static final zzfw zzf;
    public static final zzfw zzg;
    public static final zzfw zzh;
    public static final zzfw zzi;
    public static final zzfw zzj;
    public static final zzfw zzk;
    public static final zzfw zzl;
    public static final zzfw zzm;
    public static final zzfw zzn;
    public static final zzfw zzo;
    public static final zzfw zzp;
    public static final zzfw zzq;
    public static final zzfw zzr;
    public static final zzfw zzs;
    public static final zzfw zzt;
    public static final zzfw zzu;
    public static final zzfw zzv;
    public static final zzfw zzw;
    public static final zzfw zzx;
    public static final zzfw zzy;
    public static final zzfw zzz;

    static {
        zzfx.zzbk = Collections.synchronizedList(new ArrayList());
        Collections.synchronizedSet(new HashSet());
        zzfx.zza = zzfx.zza("measurement.ad_id_cache_time", 10000L, 10000L, () -> zzoy.zza(), false);
        zzfx.zzb = zzfx.zza("measurement.app_uninstalled_additional_ad_id_cache_time", 3600000L, 3600000L, () -> zzoy.zzb(), false);
        zzfx.zzc = zzfx.zza("measurement.monitoring.sample_period_millis", 86400000L, 86400000L, () -> zzoy.zzA(), false);
        zzfx.zzd = zzfx.zza("measurement.config.cache_time", 86400000L, 3600000L, () -> zzoy.zzf(), false);
        zzfx.zze = zzfx.zza("measurement.config.url_scheme", "https", "https", () -> zzoy.zzh(), false);
        zzfx.zzf = zzfx.zza("measurement.config.url_authority", "app-measurement.com", "app-measurement.com", () -> zzoy.zzg(), false);
        zzfx.zzg = zzfx.zza("measurement.upload.max_bundles", 100, 100, () -> ((int)zzoy.zzaj()), false);
        zzfx.zzh = zzfx.zza("measurement.upload.max_batch_size", 0x10000, 0x10000, () -> ((int)zzoy.zzar()), false);
        zzfx.zzi = zzfx.zza("measurement.upload.max_bundle_size", 0x10000, 0x10000, () -> ((int)zzoy.zzai()), false);
        zzfx.zzj = zzfx.zza("measurement.upload.max_events_per_bundle", 1000, 1000, () -> ((int)zzoy.zzam()), false);
        zzfx.zzk = zzfx.zza("measurement.upload.max_events_per_day", 100000, 100000, () -> ((int)zzoy.zzan()), false);
        zzfx.zzl = zzfx.zza("measurement.upload.max_error_events_per_day", 1000, 1000, () -> ((int)zzoy.zzal()), false);
        zzfx.zzm = zzfx.zza("measurement.upload.max_public_events_per_day", 50000, 50000, () -> ((int)zzoy.zzao()), false);
        zzfx.zzn = zzfx.zza("measurement.upload.max_conversions_per_day", 10000, 10000, () -> ((int)zzoy.zzak()), false);
        zzfx.zzo = zzfx.zza("measurement.upload.max_realtime_events_per_day", 10, 10, () -> ((int)zzoy.zzaq()), false);
        zzfx.zzp = zzfx.zza("measurement.store.max_stored_events_per_app", 100000, 100000, () -> ((int)zzoy.zzr()), false);
        zzfx.zzq = zzfx.zza("measurement.upload.url", "https://app-measurement.com/a", "https://app-measurement.com/a", () -> zzoy.zzau(), false);
        zzfx.zzr = zzfx.zza("measurement.sgtm.google_signal.url", "https://app-measurement.com/s/d", "https://app-measurement.com/s/d", () -> zzoy.zzn(), false);
        zzfx.zzs = zzfx.zza("measurement.sgtm.service_upload_apps_list", "", "", () -> zzoy.zzM(), false);
        zzfx.zzt = zzfx.zza("measurement.sgtm.upload.backoff_http_codes", "404,429,503,504", "404,429,503,504", () -> zzoy.zzN(), false);
        zzfx.zzu = zzfx.zza("measurement.sgtm.upload.retry_interval", 600000L, 600000L, () -> zzoy.zzT(), false);
        zzfx.zzv = zzfx.zza("measurement.sgtm.upload.retry_max_wait", 21600000L, 21600000L, () -> zzoy.zzU(), false);
        zzfx.zzw = zzfx.zza("measurement.sgtm.batch.retry_interval", 1800000L, 1800000L, () -> zzoy.zzJ(), false);
        zzfx.zzx = zzfx.zza("measurement.sgtm.batch.retry_max_wait", 21600000L, 21600000L, () -> zzoy.zzL(), false);
        zzfx.zzy = zzfx.zza("measurement.sgtm.batch.retry_max_count", 10, 10, () -> ((int)zzoy.zzK()), false);
        zzfx.zzz = zzfx.zza("measurement.sgtm.upload.max_queued_batches", 5000, 5000, () -> ((int)zzoy.zzP()), false);
        zzfx.zzA = zzfx.zza("measurement.sgtm.upload.batches_retrieval_limit", 5, 5, () -> ((int)zzoy.zzO()), false);
        zzfx.zzB = zzfx.zza("measurement.sgtm.upload.min_delay_after_startup", 5000L, 5000L, () -> zzoy.zzS(), false);
        zzfx.zzC = zzfx.zza("measurement.sgtm.upload.min_delay_after_broadcast", 1000L, 1000L, () -> zzoy.zzR(), false);
        zzfx.zzD = zzfx.zza("measurement.sgtm.upload.min_delay_after_background", 600000L, 600000L, () -> zzoy.zzQ(), false);
        zzfx.zzE = zzfx.zza("measurement.sgtm.batch.long_queuing_threshold", 14400000L, 14400000L, () -> zzoy.zzI(), false);
        zzfx.zzF = zzfx.zza("measurement.upload.backoff_period", 43200000L, 43200000L, () -> zzoy.zzaf(), false);
        zzfx.zzG = zzfx.zza("measurement.upload.window_interval", 3600000L, 3600000L, () -> zzoy.zzav(), false);
        zzfx.zzH = zzfx.zza("measurement.upload.interval", 3600000L, 3600000L, () -> zzoy.zzah(), false);
        zzfx.zzI = zzfx.zza("measurement.upload.realtime_upload_interval", 10000L, 10000L, () -> zzoy.zzE(), false);
        zzfx.zzJ = zzfx.zza("measurement.upload.debug_upload_interval", 1000L, 1000L, () -> zzoy.zzi(), false);
        zzfx.zzK = zzfx.zza("measurement.upload.minimum_delay", 500L, 500L, () -> zzoy.zzz(), false);
        zzfx.zzL = zzfx.zza("measurement.alarm_manager.minimum_interval", 60000L, 60000L, () -> zzoy.zzy(), false);
        zzfx.zzM = zzfx.zza("measurement.upload.stale_data_deletion_interval", 86400000L, 86400000L, () -> zzoy.zzV(), false);
        zzfx.zzN = zzfx.zza("measurement.upload.refresh_blacklisted_config_interval", 604800000L, 604800000L, () -> zzoy.zzF(), false);
        zzfx.zzO = zzfx.zza("measurement.upload.initial_upload_delay_time", 15000L, 15000L, () -> zzoy.zzag(), false);
        zzfx.zzP = zzfx.zza("measurement.upload.retry_time", 1800000L, 1800000L, () -> zzoy.zzat(), false);
        zzfx.zzQ = zzfx.zza("measurement.upload.retry_count", 6, 6, () -> ((int)zzoy.zzas()), false);
        zzfx.zzR = zzfx.zza("measurement.upload.max_queue_time", 518400000L, 518400000L, () -> zzoy.zzap(), false);
        zzfx.zzS = zzfx.zza("measurement.upload.google_signal_max_queue_time", 300000L, 300000L, () -> zzoy.zzm(), false);
        zzfx.zzT = zzfx.zza("measurement.lifetimevalue.max_currency_tracked", 4, 4, () -> ((int)zzoy.zzo()), false);
        zzfx.zzU = zzfx.zza("measurement.audience.filter_result_max_count", 200, 200, () -> ((int)zzoy.zzt()), false);
        zzfx.zzV = zzfx.zza("measurement.upload.max_public_user_properties", 100, 100, null, false);
        zzfx.zzW = zzfx.zza("measurement.upload.max_event_name_cardinality", 2000, 2000, null, false);
        zzfx.zzX = zzfx.zza("measurement.upload.max_public_event_params", 100, 100, null, false);
        zzfx.zzY = zzfx.zza("measurement.service_client.idle_disconnect_millis", 5000L, 5000L, () -> zzoy.zzG(), false);
        zzfx.zzZ = zzfx.zza("measurement.service_client.reconnect_millis", 1000L, 1000L, () -> zzoy.zzH(), false);
        zzfx.zzaa = zzfx.zza("measurement.test.boolean_flag", Boolean.FALSE, Boolean.FALSE, zzdk.zza, false);
        zzfx.zzab = zzfx.zza("measurement.test.string_flag", "---", "---", zzdl.zza, false);
        zzfx.zzac = zzfx.zza("measurement.test.long_flag", -1L, -1L, zzdn.zza, false);
        zzfx.zza("measurement.test.cached_long_flag", -1L, -1L, zzdo.zza, true);
        zzfx.zzad = zzfx.zza("measurement.test.int_flag", -2, -2, zzdp.zza, false);
        zzfx.zzae = zzfx.zza("measurement.test.double_flag", -3.0, -3.0, zzdq.zza, false);
        zzfx.zzaf = zzfx.zza("measurement.experiment.max_ids", 50, 50, zzdr.zza, false);
        zzfx.zzag = zzfx.zza("measurement.upload.max_item_scoped_custom_parameters", 27, 27, zzds.zza, false);
        zzfx.zzah = zzfx.zza("measurement.upload.max_event_parameter_value_length", 500, 500, zzdt.zza, true);
        zzfx.zzai = zzfx.zza("measurement.max_bundles_per_iteration", 100, 100, zzdu.zza, false);
        zzfx.zzaj = zzfx.zza("measurement.sdk.attribution.cache.ttl", 604800000L, 604800000L, zzdv.zza, false);
        zzfx.zzak = zzfx.zza("measurement.redaction.app_instance_id.ttl", 7200000L, 7200000L, zzdw.zza, false);
        zzfx.zzal = zzfx.zza("measurement.rb.attribution.client.min_ad_services_version", 7, 7, zzdy.zza, false);
        zzfx.zzam = zzfx.zza("measurement.dma_consent.max_daily_dcu_realtime_events", 1, 1, zzdz.zza, false);
        zzfx.zzan = zzfx.zza("measurement.rb.attribution.uri_scheme", "https", "https", zzea.zza, false);
        zzfx.zzao = zzfx.zza("measurement.rb.attribution.uri_authority", "google-analytics.com", "google-analytics.com", zzeb.zza, false);
        zzfx.zzap = zzfx.zza("measurement.rb.attribution.uri_path", "privacy-sandbox/register-app-conversion", "privacy-sandbox/register-app-conversion", zzec.zza, false);
        zzfx.zzaq = zzfx.zza("measurement.session.engagement_interval", 3600000L, 3600000L, zzed.zza, false);
        zzfx.zzar = zzfx.zza("measurement.rb.attribution.app_allowlist", "com.labpixies.flood", "com.labpixies.flood", zzee.zza, false);
        zzfx.zzas = zzfx.zza("measurement.rb.attribution.user_properties", "_npa,npa|_fot,fot", "_npa,npa|_fot,fot", zzef.zza, false);
        zzfx.zzat = zzfx.zza("measurement.rb.attribution.event_params", "value|currency", "value|currency", zzeg.zza, false);
        zzfx.zzau = zzfx.zza("measurement.rb.attribution.query_parameters_to_remove", "", "", zzeh.zza, false);
        zzfx.zzav = zzfx.zza("measurement.rb.attribution.max_queue_time", 864000000L, 864000000L, zzej.zza, false);
        zzfx.zzaw = zzfx.zza("measurement.rb.attribution.max_retry_delay_seconds", 16, 16, zzek.zza, false);
        zzfx.zzax = zzfx.zza("measurement.rb.attribution.client.min_time_after_boot_seconds", 90, 90, zzel.zza, false);
        zzfx.zza("measurement.rb.attribution.max_trigger_uris_queried_at_once", 0, 0, zzem.zza, false);
        zzfx.zzay = zzfx.zza("measurement.rb.max_trigger_registrations_per_day", 1000, 1000, zzen.zza, false);
        zzfx.zzaz = zzfx.zza("measurement.config.bundle_for_all_apps_on_backgrounded", Boolean.TRUE, Boolean.TRUE, zzeo.zza, false);
        zzfx.zzaA = zzfx.zza("measurement.config.notify_trigger_uris_on_backgrounded", Boolean.TRUE, Boolean.TRUE, zzep.zza, false);
        zzfx.zzaB = zzfx.zza("measurement.rb.attribution.notify_app_delay_millis", 3000, 3000, zzeq.zza, false);
        zzfx.zzaC = zzfx.zza("measurement.quality.checksum", Boolean.FALSE, Boolean.FALSE, null, false);
        zzfx.zzaD = zzfx.zza("measurement.audience.use_bundle_end_timestamp_for_non_sequence_property_filters", Boolean.FALSE, Boolean.FALSE, zzer.zza, false);
        zzfx.zzaE = zzfx.zza("measurement.audience.refresh_event_count_filters_timestamp", Boolean.FALSE, Boolean.FALSE, zzes.zza, false);
        zzfx.zzaF = zzfx.zza("measurement.audience.use_bundle_timestamp_for_event_count_filters", Boolean.FALSE, Boolean.FALSE, zzeu.zza, true);
        zzfx.zzaG = zzfx.zza("measurement.sdk.collection.last_deep_link_referrer_campaign2", Boolean.FALSE, Boolean.FALSE, zzev.zza, false);
        zzfx.zzaH = zzfx.zza("measurement.integration.disable_firebase_instance_id", Boolean.FALSE, Boolean.FALSE, zzew.zza, false);
        zzfx.zzaI = zzfx.zza("measurement.collection.service.update_with_analytics_fix", Boolean.FALSE, Boolean.FALSE, zzex.zza, false);
        zzfx.zzaJ = zzfx.zza("measurement.service.storage_consent_support_version", 203600, 203600, zzey.zza, false);
        zzfx.zzaK = zzfx.zza("measurement.service.store_null_safelist", Boolean.TRUE, Boolean.TRUE, zzez.zza, false);
        zzfx.zzaL = zzfx.zza("measurement.service.store_safelist", Boolean.TRUE, Boolean.TRUE, zzfa.zza, false);
        zzfx.zzaM = zzfx.zza("measurement.session_stitching_token_enabled", Boolean.FALSE, Boolean.FALSE, zzfb.zza, false);
        zzfx.zzaN = zzfx.zza("measurement.sgtm.client.upload_on_backgrounded.dev", Boolean.FALSE, Boolean.FALSE, zzfc.zza, true);
        zzfx.zzaO = zzfx.zza("measurement.gmscore_client_telemetry", Boolean.FALSE, Boolean.FALSE, zzft.zza, false);
        zzfx.zzaP = zzfx.zza("measurement.rb.attribution.service", Boolean.TRUE, Boolean.TRUE, zzfd.zza, true);
        zzfx.zzaQ = zzfx.zza("measurement.rb.attribution.client2", Boolean.TRUE, Boolean.TRUE, zzff.zza, true);
        zzfx.zzaR = zzfx.zza("measurement.rb.attribution.uuid_generation", Boolean.TRUE, Boolean.TRUE, zzfg.zza, false);
        zzfx.zzaS = zzfx.zza("measurement.rb.attribution.enable_trigger_redaction", Boolean.TRUE, Boolean.TRUE, zzfh.zza, false);
        zzfx.zza("measurement.rb.attribution.followup1.service", Boolean.FALSE, Boolean.FALSE, zzfi.zza, false);
        zzfx.zzaT = zzfx.zza("measurement.rb.attribution.retry_disposition", Boolean.FALSE, Boolean.FALSE, zzfj.zza, false);
        zzfx.zzaU = zzfx.zza("measurement.client.sessions.enable_fix_background_engagement", Boolean.FALSE, Boolean.FALSE, zzfv.zza, false);
        zzfx.zzaV = zzfx.zza("measurement.set_default_event_parameters_propagate_clear.service.dev", Boolean.TRUE, Boolean.TRUE, zzfk.zza, false);
        zzfx.zzaW = zzfx.zza("measurement.set_default_event_parameters_propagate_clear.client.dev", Boolean.TRUE, Boolean.TRUE, zzfl.zza, false);
        zzfx.zzaX = zzfx.zza("measurement.service.ad_impression.convert_value_to_double", Boolean.TRUE, Boolean.TRUE, zzfm.zza, false);
        zzfx.zza("measurement.rb.attribution.service.enable_max_trigger_uris_queried_at_once", Boolean.TRUE, Boolean.TRUE, zzfn.zza, false);
        zzfx.zza("measurement.remove_conflicting_first_party_apis.dev", Boolean.FALSE, Boolean.FALSE, zzfo.zza, false);
        zzfx.zzaY = zzfx.zza("measurement.rb.attribution.service.trigger_uris_high_priority", Boolean.TRUE, Boolean.TRUE, zzbp.zza, false);
        zzfx.zzaZ = zzfx.zza("measurement.tcf.consent_fix", Boolean.FALSE, Boolean.FALSE, zzbq.zza, false);
        zzfx.zzba = zzfx.zza("measurement.tcf.empty_pref_fix", Boolean.TRUE, Boolean.TRUE, zzbr.zza, false);
        zzfx.zzbb = zzfx.zza("measurement.experiment.enable_phenotype_experiment_reporting", Boolean.TRUE, Boolean.TRUE, zzbs.zza, false);
        zzfx.zzbc = zzfx.zza("measurement.set_default_event_parameters.fix_service_request_ordering", Boolean.FALSE, Boolean.FALSE, zzbj.zza, false);
        zzfx.zzbd = zzfx.zza("measurement.set_default_event_parameters.fix_app_update_logging", Boolean.TRUE, Boolean.TRUE, zzbi.zza, false);
        zzfx.zzbe = zzfx.zza("measurement.service.fix_stop_bundling_bug", Boolean.TRUE, Boolean.TRUE, zzbm.zza, false);
        zzfx.zzbf = zzfx.zza("measurement.fix_params_logcat_spam", Boolean.TRUE, Boolean.TRUE, zzbl.zza, false);
        zzfx.zzbg = zzfx.zza("measurement.gbraid_campaign.stop_lgclid", Boolean.FALSE, Boolean.FALSE, zzfs.zza, false);
        zzfx.zzbh = zzfx.zza("measurement.gbraid_compaign.compaign_params_triggering_info_update", "gclid,gbraid,gad_campaignid", "gclid,gbraid,gad_campaignid", zzbt.zza, false);
        zzfx.zzbi = zzfx.zza("measurement.edpb.service", Boolean.FALSE, Boolean.FALSE, zzbk.zza, false);
        zzfx.zzbj = zzfx.zza("measurement.edpb.events_cached_in_no_data_mode", "_f,_v,_cmp", "_f,_v,_cmp", zzbu.zza, false);
    }

    public static zzfw zza(String s, Object object0, Object object1, zzbn zzbn0, boolean z) {
        zzfw zzfw0 = new zzfw(s, object0, object1, zzbn0, null);
        if(z) {
            zzfx.zzbk.add(zzfw0);
        }
        return zzfw0;
    }
}

